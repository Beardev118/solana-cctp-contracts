/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type { ITokenMinter, ITokenMinterInterface } from "../ITokenMinter";

const _abi = [
  {
    type: "function",
    name: "burn",
    inputs: [
      {
        name: "burnToken",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getLocalToken",
    inputs: [
      {
        name: "remoteDomain",
        type: "uint32",
        internalType: "uint32",
      },
      {
        name: "remoteToken",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "mint",
    inputs: [
      {
        name: "sourceDomain",
        type: "uint32",
        internalType: "uint32",
      },
      {
        name: "burnToken",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "mintToken",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setTokenController",
    inputs: [
      {
        name: "newTokenController",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
] as const;

export class ITokenMinter__factory {
  static readonly abi = _abi;
  static createInterface(): ITokenMinterInterface {
    return new Interface(_abi) as ITokenMinterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ITokenMinter {
    return new Contract(address, _abi, runner) as unknown as ITokenMinter;
  }
}
