/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { Attestable, AttestableInterface } from "../Attestable";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "attester",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "acceptOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "attesterManager",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "disableAttester",
    inputs: [
      {
        name: "attester",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "enableAttester",
    inputs: [
      {
        name: "newAttester",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getEnabledAttester",
    inputs: [
      {
        name: "index",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getNumEnabledAttesters",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isEnabledAttester",
    inputs: [
      {
        name: "attester",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "pendingOwner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "setSignatureThreshold",
    inputs: [
      {
        name: "newSignatureThreshold",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "signatureThreshold",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "newOwner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateAttesterManager",
    inputs: [
      {
        name: "newAttesterManager",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "AttesterDisabled",
    inputs: [
      {
        name: "attester",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "AttesterEnabled",
    inputs: [
      {
        name: "attester",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "AttesterManagerUpdated",
    inputs: [
      {
        name: "previousAttesterManager",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newAttesterManager",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OwnershipTransferStarted",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "SignatureThresholdUpdated",
    inputs: [
      {
        name: "oldSignatureThreshold",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "newSignatureThreshold",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620012ec380380620012ec833981810160405260208110156200003757600080fd5b50516200004d620000476200006f565b62000073565b62000058336200009d565b60016002556200006881620000bf565b50620002f6565b3390565b600180546001600160a01b03191690556200009a816200021f602090811b62000b7e17901c565b50565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b031633146200011f576040805162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206e6f74206174746573746572206d616e616765720000000000604482015290519081900360640190fd5b6001600160a01b0381166200017b576040805162461bcd60e51b815260206004820152601c60248201527f4e6577206174746573746572206d757374206265206e6f6e7a65726f00000000604482015290519081900360640190fd5b620001968160036200026f60201b62000bf31790919060201c565b620001e8576040805162461bcd60e51b815260206004820152601860248201527f417474657374657220616c726561647920656e61626c65640000000000000000604482015290519081900360640190fd5b6040516001600160a01b038216907f5b99bab45c72ce67e89466dbc47480b9c1fde1400e7268bbf463b8354ee4653f90600090a250565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600062000286836001600160a01b0384166200028f565b90505b92915050565b60006200029d8383620002de565b620002d55750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000289565b50600062000289565b60009081526001919091016020526040902054151590565b610fe680620003066000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c8063a82f2e261161008c578063de7769d411610066578063de7769d4146101fd578063e30c397814610230578063f2fde38b14610238578063fae368791461026b576100df565b8063a82f2e26146101bb578063bbde5374146101c3578063beb673d8146101e0576100df565b80637af82f60116100bd5780637af82f601461013b5780638da5cb5b146101825780639b0d94b7146101b3576100df565b80632d025080146100e457806351079a531461011957806379ba509714610133575b600080fd5b610117600480360360208110156100fa57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661029e565b005b6101216104ca565b60408051918252519081900360200190f35b6101176104db565b61016e6004803603602081101561015157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661057e565b604080519115158252519081900360200190f35b61018a610591565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61018a6105ad565b6101216105c9565b610117600480360360208110156101d957600080fd5b50356105cf565b61018a600480360360208110156101f657600080fd5b50356107f1565b6101176004803603602081101561021357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166107fe565b61018a610908565b6101176004803603602081101561024e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610924565b6101176004803603602081101561028157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166109bc565b60055473ffffffffffffffffffffffffffffffffffffffff16331461032457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f43616c6c6572206e6f74206174746573746572206d616e616765720000000000604482015290519081900360640190fd5b600061032e6104ca565b90506001811161039f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f546f6f2066657720656e61626c65642061747465737465727300000000000000604482015290519081900360640190fd5b600254811161040f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5369676e6174757265207468726573686f6c6420697320746f6f206c6f770000604482015290519081900360640190fd5b61041a600383610c1c565b61048557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f417474657374657220616c72656164792064697361626c656400000000000000604482015290519081900360640190fd5b60405173ffffffffffffffffffffffffffffffffffffffff8316907f78e573a18c75957b7cadaab01511aa1c19a659f06ecf53e01de37ed92d3261fc90600090a25050565b60006104d66003610c3e565b905090565b60006104e5610c49565b90508073ffffffffffffffffffffffffffffffffffffffff16610506610908565b73ffffffffffffffffffffffffffffffffffffffff1614610572576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526029815260200180610f886029913960400191505060405180910390fd5b61057b81610c4d565b50565b600061058b600383610c7e565b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b60055473ffffffffffffffffffffffffffffffffffffffff1690565b60025481565b60055473ffffffffffffffffffffffffffffffffffffffff16331461065557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f43616c6c6572206e6f74206174746573746572206d616e616765720000000000604482015290519081900360640190fd5b806106c157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f496e76616c6964207369676e6174757265207468726573686f6c640000000000604482015290519081900360640190fd5b6106cb6003610c3e565b81111561073957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4e6577207369676e6174757265207468726573686f6c6420746f6f2068696768604482015290519081900360640190fd5b6002548114156107aa57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5369676e6174757265207468726573686f6c6420616c72656164792073657400604482015290519081900360640190fd5b6002805490829055604080518281526020810184905281517f149153f58b4da003a8cfd4523709a202402182cb5aa335046911277a1be6eede929181900390910190a15050565b600061058b600383610ca0565b610806610cac565b73ffffffffffffffffffffffffffffffffffffffff811661088857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f496e76616c6964206174746573746572206d616e616765722061646472657373604482015290519081900360640190fd5b60055473ffffffffffffffffffffffffffffffffffffffff166108aa82610d56565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f0cee1b7ae04f3c788dd3a46c6fa677eb95b913611ef7ab59524fdc09d346021960405160405180910390a35050565b60015473ffffffffffffffffffffffffffffffffffffffff1690565b61092c610cac565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117909155610977610591565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b60055473ffffffffffffffffffffffffffffffffffffffff163314610a4257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f43616c6c6572206e6f74206174746573746572206d616e616765720000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116610ac457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4e6577206174746573746572206d757374206265206e6f6e7a65726f00000000604482015290519081900360640190fd5b610acf600382610bf3565b610b3a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f417474657374657220616c726561647920656e61626c65640000000000000000604482015290519081900360640190fd5b60405173ffffffffffffffffffffffffffffffffffffffff8216907f5b99bab45c72ce67e89466dbc47480b9c1fde1400e7268bbf463b8354ee4653f90600090a250565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610c158373ffffffffffffffffffffffffffffffffffffffff8416610d9d565b9392505050565b6000610c158373ffffffffffffffffffffffffffffffffffffffff8416610de7565b600061058b82610ecb565b3390565b600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905561057b81610b7e565b6000610c158373ffffffffffffffffffffffffffffffffffffffff8416610ecf565b6000610c158383610ee7565b610cb4610c49565b73ffffffffffffffffffffffffffffffffffffffff16610cd2610591565b73ffffffffffffffffffffffffffffffffffffffff1614610d5457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b565b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000610da98383610ecf565b610ddf5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561058b565b50600061058b565b60008181526001830160205260408120548015610ec15783547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8083019190810190600090879083908110610e3857fe5b9060005260206000200154905080876000018481548110610e5557fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080610e8557fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061058b565b600091505061058b565b5490565b60009081526001919091016020526040902054151590565b81546000908210610f43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610f666022913960400191505060405180910390fd5b826000018281548110610f5257fe5b906000526020600020015490509291505056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206e6577206f776e6572a2646970667358221220758212e570209958a10a18e0f0bb730025cb120ac6f5a3de4ba7ba87bd2f6bbd64736f6c63430007060033";

type AttestableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttestableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Attestable__factory extends ContractFactory {
  constructor(...args: AttestableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    attester: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(attester, overrides || {});
  }
  override deploy(
    attester: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(attester, overrides || {}) as Promise<
      Attestable & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Attestable__factory {
    return super.connect(runner) as Attestable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttestableInterface {
    return new Interface(_abi) as AttestableInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Attestable {
    return new Contract(address, _abi, runner) as unknown as Attestable;
  }
}
