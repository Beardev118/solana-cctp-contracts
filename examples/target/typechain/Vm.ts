/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Vm {
  export type LogStruct = { topics: BytesLike[]; data: BytesLike };

  export type LogStructOutput = [topics: string[], data: string] & {
    topics: string[];
    data: string;
  };
}

export interface VmInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accesses"
      | "activeFork"
      | "addr"
      | "allowCheatcodes"
      | "assume"
      | "broadcast()"
      | "broadcast(address)"
      | "broadcast(uint256)"
      | "chainId"
      | "clearMockedCalls"
      | "closeFile"
      | "coinbase"
      | "createFork(string)"
      | "createFork(string,uint256)"
      | "createFork(string,bytes32)"
      | "createSelectFork(string,uint256)"
      | "createSelectFork(string,bytes32)"
      | "createSelectFork(string)"
      | "deal"
      | "deriveKey(string,uint32)"
      | "deriveKey(string,string,uint32)"
      | "difficulty"
      | "envAddress(string)"
      | "envAddress(string,string)"
      | "envBool(string)"
      | "envBool(string,string)"
      | "envBytes(string)"
      | "envBytes(string,string)"
      | "envBytes32(string,string)"
      | "envBytes32(string)"
      | "envInt(string,string)"
      | "envInt(string)"
      | "envString(string,string)"
      | "envString(string)"
      | "envUint(string)"
      | "envUint(string,string)"
      | "etch"
      | "expectCall(address,bytes)"
      | "expectCall(address,uint256,bytes)"
      | "expectEmit(bool,bool,bool,bool)"
      | "expectEmit(bool,bool,bool,bool,address)"
      | "expectRevert(bytes4)"
      | "expectRevert(bytes)"
      | "expectRevert()"
      | "fee"
      | "ffi"
      | "getCode"
      | "getDeployedCode"
      | "getNonce"
      | "getRecordedLogs"
      | "isPersistent"
      | "label"
      | "load"
      | "makePersistent(address[])"
      | "makePersistent(address,address)"
      | "makePersistent(address)"
      | "makePersistent(address,address,address)"
      | "mockCall(address,uint256,bytes,bytes)"
      | "mockCall(address,bytes,bytes)"
      | "parseAddress"
      | "parseBool"
      | "parseBytes"
      | "parseBytes32"
      | "parseInt"
      | "parseJson(string)"
      | "parseJson(string,string)"
      | "parseUint"
      | "prank(address,address)"
      | "prank(address)"
      | "projectRoot"
      | "readFile"
      | "readFileBinary"
      | "readLine"
      | "record"
      | "recordLogs"
      | "rememberKey"
      | "removeFile"
      | "revertTo"
      | "revokePersistent(address[])"
      | "revokePersistent(address)"
      | "roll"
      | "rollFork(bytes32)"
      | "rollFork(uint256,uint256)"
      | "rollFork(uint256)"
      | "rollFork(uint256,bytes32)"
      | "rpcUrl"
      | "rpcUrls"
      | "selectFork"
      | "setEnv"
      | "setNonce"
      | "sign"
      | "snapshot"
      | "startBroadcast()"
      | "startBroadcast(address)"
      | "startBroadcast(uint256)"
      | "startPrank(address)"
      | "startPrank(address,address)"
      | "stopBroadcast"
      | "stopPrank"
      | "store"
      | "toString(address)"
      | "toString(uint256)"
      | "toString(bytes)"
      | "toString(bool)"
      | "toString(int256)"
      | "toString(bytes32)"
      | "transact(uint256,bytes32)"
      | "transact(bytes32)"
      | "warp"
      | "writeFile"
      | "writeFileBinary"
      | "writeLine"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accesses",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "activeFork",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addr", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "allowCheatcodes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "assume", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "broadcast()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "broadcast(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "broadcast(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chainId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "clearMockedCalls",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "closeFile", values: [string]): string;
  encodeFunctionData(
    functionFragment: "coinbase",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createFork(string)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createFork(string,uint256)",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createFork(string,bytes32)",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createSelectFork(string,uint256)",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createSelectFork(string,bytes32)",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createSelectFork(string)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deal",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deriveKey(string,uint32)",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deriveKey(string,string,uint32)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "difficulty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "envAddress(string)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "envAddress(string,string)",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "envBool(string)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "envBool(string,string)",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "envBytes(string)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "envBytes(string,string)",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "envBytes32(string,string)",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "envBytes32(string)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "envInt(string,string)",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "envInt(string)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "envString(string,string)",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "envString(string)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "envUint(string)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "envUint(string,string)",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "etch",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "expectCall(address,bytes)",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "expectCall(address,uint256,bytes)",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "expectEmit(bool,bool,bool,bool)",
    values: [boolean, boolean, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "expectEmit(bool,bool,bool,bool,address)",
    values: [boolean, boolean, boolean, boolean, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "expectRevert(bytes4)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "expectRevert(bytes)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "expectRevert()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fee", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "ffi", values: [string[]]): string;
  encodeFunctionData(functionFragment: "getCode", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getDeployedCode",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecordedLogs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPersistent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "label",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "load",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "makePersistent(address[])",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "makePersistent(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "makePersistent(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "makePersistent(address,address,address)",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mockCall(address,uint256,bytes,bytes)",
    values: [AddressLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mockCall(address,bytes,bytes)",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parseAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "parseBool", values: [string]): string;
  encodeFunctionData(functionFragment: "parseBytes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "parseBytes32",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "parseInt", values: [string]): string;
  encodeFunctionData(
    functionFragment: "parseJson(string)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "parseJson(string,string)",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "parseUint", values: [string]): string;
  encodeFunctionData(
    functionFragment: "prank(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "prank(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "projectRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "readFile", values: [string]): string;
  encodeFunctionData(
    functionFragment: "readFileBinary",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "readLine", values: [string]): string;
  encodeFunctionData(functionFragment: "record", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recordLogs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rememberKey",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "removeFile", values: [string]): string;
  encodeFunctionData(
    functionFragment: "revertTo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePersistent(address[])",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePersistent(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "roll", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "rollFork(bytes32)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rollFork(uint256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rollFork(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rollFork(uint256,bytes32)",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "rpcUrl", values: [string]): string;
  encodeFunctionData(functionFragment: "rpcUrls", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "selectFork",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnv",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNonce",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sign",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "snapshot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startBroadcast()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startBroadcast(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startBroadcast(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startPrank(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startPrank(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stopBroadcast",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stopPrank", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "store",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toString(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toString(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toString(bytes)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toString(bool)",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "toString(int256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toString(bytes32)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transact(uint256,bytes32)",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transact(bytes32)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "warp", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "writeFile",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "writeFileBinary",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "writeLine",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "accesses", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "activeFork", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowCheatcodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assume", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "broadcast()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "broadcast(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "broadcast(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clearMockedCalls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeFile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "coinbase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createFork(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFork(string,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFork(string,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSelectFork(string,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSelectFork(string,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSelectFork(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deriveKey(string,uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deriveKey(string,string,uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "difficulty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "envAddress(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envAddress(string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envBool(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envBool(string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envBytes(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envBytes(string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envBytes32(string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envBytes32(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envInt(string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envInt(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envString(string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envString(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envUint(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envUint(string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "etch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "expectCall(address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expectCall(address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expectEmit(bool,bool,bool,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expectEmit(bool,bool,bool,bool,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expectRevert(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expectRevert(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expectRevert()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ffi", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDeployedCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRecordedLogs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPersistent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "label", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "load", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makePersistent(address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makePersistent(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makePersistent(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makePersistent(address,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockCall(address,uint256,bytes,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockCall(address,bytes,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "parseBool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "parseBytes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parseBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "parseInt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parseJson(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseJson(string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "parseUint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prank(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prank(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "readFile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readFileBinary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "readLine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "record", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recordLogs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rememberKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeFile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revertTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokePersistent(address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePersistent(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rollFork(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollFork(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollFork(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollFork(uint256,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rpcUrl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rpcUrls", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "selectFork", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setEnv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sign", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "snapshot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startBroadcast()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startBroadcast(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startBroadcast(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startPrank(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startPrank(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopBroadcast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stopPrank", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "store", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toString(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toString(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toString(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toString(bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toString(int256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toString(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transact(uint256,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transact(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "warp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "writeFile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "writeFileBinary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "writeLine", data: BytesLike): Result;
}

export interface Vm extends BaseContract {
  connect(runner?: ContractRunner | null): Vm;
  waitForDeployment(): Promise<this>;

  interface: VmInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accesses: TypedContractMethod<
    [arg0: AddressLike],
    [[string[], string[]] & { reads: string[]; writes: string[] }],
    "nonpayable"
  >;

  activeFork: TypedContractMethod<[], [bigint], "nonpayable">;

  addr: TypedContractMethod<[arg0: BigNumberish], [string], "nonpayable">;

  allowCheatcodes: TypedContractMethod<
    [arg0: AddressLike],
    [void],
    "nonpayable"
  >;

  assume: TypedContractMethod<[arg0: boolean], [void], "nonpayable">;

  "broadcast()": TypedContractMethod<[], [void], "nonpayable">;

  "broadcast(address)": TypedContractMethod<
    [arg0: AddressLike],
    [void],
    "nonpayable"
  >;

  "broadcast(uint256)": TypedContractMethod<
    [arg0: BigNumberish],
    [void],
    "nonpayable"
  >;

  chainId: TypedContractMethod<[arg0: BigNumberish], [void], "nonpayable">;

  clearMockedCalls: TypedContractMethod<[], [void], "nonpayable">;

  closeFile: TypedContractMethod<[arg0: string], [void], "nonpayable">;

  coinbase: TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;

  "createFork(string)": TypedContractMethod<
    [arg0: string],
    [bigint],
    "nonpayable"
  >;

  "createFork(string,uint256)": TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  "createFork(string,bytes32)": TypedContractMethod<
    [arg0: string, arg1: BytesLike],
    [bigint],
    "nonpayable"
  >;

  "createSelectFork(string,uint256)": TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  "createSelectFork(string,bytes32)": TypedContractMethod<
    [arg0: string, arg1: BytesLike],
    [bigint],
    "nonpayable"
  >;

  "createSelectFork(string)": TypedContractMethod<
    [arg0: string],
    [bigint],
    "nonpayable"
  >;

  deal: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [void],
    "nonpayable"
  >;

  "deriveKey(string,uint32)": TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  "deriveKey(string,string,uint32)": TypedContractMethod<
    [arg0: string, arg1: string, arg2: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  difficulty: TypedContractMethod<[arg0: BigNumberish], [void], "nonpayable">;

  "envAddress(string)": TypedContractMethod<
    [arg0: string],
    [string],
    "nonpayable"
  >;

  "envAddress(string,string)": TypedContractMethod<
    [arg0: string, arg1: string],
    [string[]],
    "nonpayable"
  >;

  "envBool(string)": TypedContractMethod<
    [arg0: string],
    [boolean],
    "nonpayable"
  >;

  "envBool(string,string)": TypedContractMethod<
    [arg0: string, arg1: string],
    [boolean[]],
    "nonpayable"
  >;

  "envBytes(string)": TypedContractMethod<
    [arg0: string],
    [string],
    "nonpayable"
  >;

  "envBytes(string,string)": TypedContractMethod<
    [arg0: string, arg1: string],
    [string[]],
    "nonpayable"
  >;

  "envBytes32(string,string)": TypedContractMethod<
    [arg0: string, arg1: string],
    [string[]],
    "nonpayable"
  >;

  "envBytes32(string)": TypedContractMethod<
    [arg0: string],
    [string],
    "nonpayable"
  >;

  "envInt(string,string)": TypedContractMethod<
    [arg0: string, arg1: string],
    [bigint[]],
    "nonpayable"
  >;

  "envInt(string)": TypedContractMethod<[arg0: string], [bigint], "nonpayable">;

  "envString(string,string)": TypedContractMethod<
    [arg0: string, arg1: string],
    [string[]],
    "nonpayable"
  >;

  "envString(string)": TypedContractMethod<
    [arg0: string],
    [string],
    "nonpayable"
  >;

  "envUint(string)": TypedContractMethod<
    [arg0: string],
    [bigint],
    "nonpayable"
  >;

  "envUint(string,string)": TypedContractMethod<
    [arg0: string, arg1: string],
    [bigint[]],
    "nonpayable"
  >;

  etch: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [void],
    "nonpayable"
  >;

  "expectCall(address,bytes)": TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [void],
    "nonpayable"
  >;

  "expectCall(address,uint256,bytes)": TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;

  "expectEmit(bool,bool,bool,bool)": TypedContractMethod<
    [arg0: boolean, arg1: boolean, arg2: boolean, arg3: boolean],
    [void],
    "nonpayable"
  >;

  "expectEmit(bool,bool,bool,bool,address)": TypedContractMethod<
    [
      arg0: boolean,
      arg1: boolean,
      arg2: boolean,
      arg3: boolean,
      arg4: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  "expectRevert(bytes4)": TypedContractMethod<
    [arg0: BytesLike],
    [void],
    "nonpayable"
  >;

  "expectRevert(bytes)": TypedContractMethod<
    [arg0: BytesLike],
    [void],
    "nonpayable"
  >;

  "expectRevert()": TypedContractMethod<[], [void], "nonpayable">;

  fee: TypedContractMethod<[arg0: BigNumberish], [void], "nonpayable">;

  ffi: TypedContractMethod<[arg0: string[]], [string], "nonpayable">;

  getCode: TypedContractMethod<[arg0: string], [string], "nonpayable">;

  getDeployedCode: TypedContractMethod<[arg0: string], [string], "nonpayable">;

  getNonce: TypedContractMethod<[arg0: AddressLike], [bigint], "nonpayable">;

  getRecordedLogs: TypedContractMethod<
    [],
    [Vm.LogStructOutput[]],
    "nonpayable"
  >;

  isPersistent: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "nonpayable"
  >;

  label: TypedContractMethod<
    [arg0: AddressLike, arg1: string],
    [void],
    "nonpayable"
  >;

  load: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [string],
    "nonpayable"
  >;

  "makePersistent(address[])": TypedContractMethod<
    [arg0: AddressLike[]],
    [void],
    "nonpayable"
  >;

  "makePersistent(address,address)": TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [void],
    "nonpayable"
  >;

  "makePersistent(address)": TypedContractMethod<
    [arg0: AddressLike],
    [void],
    "nonpayable"
  >;

  "makePersistent(address,address,address)": TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: AddressLike],
    [void],
    "nonpayable"
  >;

  "mockCall(address,uint256,bytes,bytes)": TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BytesLike, arg3: BytesLike],
    [void],
    "nonpayable"
  >;

  "mockCall(address,bytes,bytes)": TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike, arg2: BytesLike],
    [void],
    "nonpayable"
  >;

  parseAddress: TypedContractMethod<[arg0: string], [string], "nonpayable">;

  parseBool: TypedContractMethod<[arg0: string], [boolean], "nonpayable">;

  parseBytes: TypedContractMethod<[arg0: string], [string], "nonpayable">;

  parseBytes32: TypedContractMethod<[arg0: string], [string], "nonpayable">;

  parseInt: TypedContractMethod<[arg0: string], [bigint], "nonpayable">;

  "parseJson(string)": TypedContractMethod<
    [arg0: string],
    [string],
    "nonpayable"
  >;

  "parseJson(string,string)": TypedContractMethod<
    [arg0: string, arg1: string],
    [string],
    "nonpayable"
  >;

  parseUint: TypedContractMethod<[arg0: string], [bigint], "nonpayable">;

  "prank(address,address)": TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [void],
    "nonpayable"
  >;

  "prank(address)": TypedContractMethod<
    [arg0: AddressLike],
    [void],
    "nonpayable"
  >;

  projectRoot: TypedContractMethod<[], [string], "nonpayable">;

  readFile: TypedContractMethod<[arg0: string], [string], "nonpayable">;

  readFileBinary: TypedContractMethod<[arg0: string], [string], "nonpayable">;

  readLine: TypedContractMethod<[arg0: string], [string], "nonpayable">;

  record: TypedContractMethod<[], [void], "nonpayable">;

  recordLogs: TypedContractMethod<[], [void], "nonpayable">;

  rememberKey: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "nonpayable"
  >;

  removeFile: TypedContractMethod<[arg0: string], [void], "nonpayable">;

  revertTo: TypedContractMethod<[arg0: BigNumberish], [boolean], "nonpayable">;

  "revokePersistent(address[])": TypedContractMethod<
    [arg0: AddressLike[]],
    [void],
    "nonpayable"
  >;

  "revokePersistent(address)": TypedContractMethod<
    [arg0: AddressLike],
    [void],
    "nonpayable"
  >;

  roll: TypedContractMethod<[arg0: BigNumberish], [void], "nonpayable">;

  "rollFork(bytes32)": TypedContractMethod<
    [arg0: BytesLike],
    [void],
    "nonpayable"
  >;

  "rollFork(uint256,uint256)": TypedContractMethod<
    [forkId: BigNumberish, blockNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  "rollFork(uint256)": TypedContractMethod<
    [arg0: BigNumberish],
    [void],
    "nonpayable"
  >;

  "rollFork(uint256,bytes32)": TypedContractMethod<
    [forkId: BigNumberish, transaction: BytesLike],
    [void],
    "nonpayable"
  >;

  rpcUrl: TypedContractMethod<[arg0: string], [string], "nonpayable">;

  rpcUrls: TypedContractMethod<[], [[string, string][]], "nonpayable">;

  selectFork: TypedContractMethod<[arg0: BigNumberish], [void], "nonpayable">;

  setEnv: TypedContractMethod<
    [arg0: string, arg1: string],
    [void],
    "nonpayable"
  >;

  setNonce: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [void],
    "nonpayable"
  >;

  sign: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [[bigint, string, string]],
    "nonpayable"
  >;

  snapshot: TypedContractMethod<[], [bigint], "nonpayable">;

  "startBroadcast()": TypedContractMethod<[], [void], "nonpayable">;

  "startBroadcast(address)": TypedContractMethod<
    [arg0: AddressLike],
    [void],
    "nonpayable"
  >;

  "startBroadcast(uint256)": TypedContractMethod<
    [arg0: BigNumberish],
    [void],
    "nonpayable"
  >;

  "startPrank(address)": TypedContractMethod<
    [arg0: AddressLike],
    [void],
    "nonpayable"
  >;

  "startPrank(address,address)": TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [void],
    "nonpayable"
  >;

  stopBroadcast: TypedContractMethod<[], [void], "nonpayable">;

  stopPrank: TypedContractMethod<[], [void], "nonpayable">;

  store: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike, arg2: BytesLike],
    [void],
    "nonpayable"
  >;

  "toString(address)": TypedContractMethod<
    [arg0: AddressLike],
    [string],
    "nonpayable"
  >;

  "toString(uint256)": TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "nonpayable"
  >;

  "toString(bytes)": TypedContractMethod<
    [arg0: BytesLike],
    [string],
    "nonpayable"
  >;

  "toString(bool)": TypedContractMethod<
    [arg0: boolean],
    [string],
    "nonpayable"
  >;

  "toString(int256)": TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "nonpayable"
  >;

  "toString(bytes32)": TypedContractMethod<
    [arg0: BytesLike],
    [string],
    "nonpayable"
  >;

  "transact(uint256,bytes32)": TypedContractMethod<
    [forkId: BigNumberish, txHash: BytesLike],
    [void],
    "nonpayable"
  >;

  "transact(bytes32)": TypedContractMethod<
    [txHash: BytesLike],
    [void],
    "nonpayable"
  >;

  warp: TypedContractMethod<[arg0: BigNumberish], [void], "nonpayable">;

  writeFile: TypedContractMethod<
    [arg0: string, arg1: string],
    [void],
    "nonpayable"
  >;

  writeFileBinary: TypedContractMethod<
    [arg0: string, arg1: BytesLike],
    [void],
    "nonpayable"
  >;

  writeLine: TypedContractMethod<
    [arg0: string, arg1: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accesses"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[string[], string[]] & { reads: string[]; writes: string[] }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "activeFork"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "addr"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "allowCheatcodes"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "assume"
  ): TypedContractMethod<[arg0: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "broadcast()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "broadcast(address)"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "broadcast(uint256)"
  ): TypedContractMethod<[arg0: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "chainId"
  ): TypedContractMethod<[arg0: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "clearMockedCalls"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "closeFile"
  ): TypedContractMethod<[arg0: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "coinbase"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createFork(string)"
  ): TypedContractMethod<[arg0: string], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "createFork(string,uint256)"
  ): TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createFork(string,bytes32)"
  ): TypedContractMethod<
    [arg0: string, arg1: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createSelectFork(string,uint256)"
  ): TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createSelectFork(string,bytes32)"
  ): TypedContractMethod<
    [arg0: string, arg1: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createSelectFork(string)"
  ): TypedContractMethod<[arg0: string], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "deal"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deriveKey(string,uint32)"
  ): TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deriveKey(string,string,uint32)"
  ): TypedContractMethod<
    [arg0: string, arg1: string, arg2: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "difficulty"
  ): TypedContractMethod<[arg0: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "envAddress(string)"
  ): TypedContractMethod<[arg0: string], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "envAddress(string,string)"
  ): TypedContractMethod<
    [arg0: string, arg1: string],
    [string[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "envBool(string)"
  ): TypedContractMethod<[arg0: string], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "envBool(string,string)"
  ): TypedContractMethod<
    [arg0: string, arg1: string],
    [boolean[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "envBytes(string)"
  ): TypedContractMethod<[arg0: string], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "envBytes(string,string)"
  ): TypedContractMethod<
    [arg0: string, arg1: string],
    [string[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "envBytes32(string,string)"
  ): TypedContractMethod<
    [arg0: string, arg1: string],
    [string[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "envBytes32(string)"
  ): TypedContractMethod<[arg0: string], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "envInt(string,string)"
  ): TypedContractMethod<
    [arg0: string, arg1: string],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "envInt(string)"
  ): TypedContractMethod<[arg0: string], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "envString(string,string)"
  ): TypedContractMethod<
    [arg0: string, arg1: string],
    [string[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "envString(string)"
  ): TypedContractMethod<[arg0: string], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "envUint(string)"
  ): TypedContractMethod<[arg0: string], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "envUint(string,string)"
  ): TypedContractMethod<
    [arg0: string, arg1: string],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "etch"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "expectCall(address,bytes)"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "expectCall(address,uint256,bytes)"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "expectEmit(bool,bool,bool,bool)"
  ): TypedContractMethod<
    [arg0: boolean, arg1: boolean, arg2: boolean, arg3: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "expectEmit(bool,bool,bool,bool,address)"
  ): TypedContractMethod<
    [
      arg0: boolean,
      arg1: boolean,
      arg2: boolean,
      arg3: boolean,
      arg4: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "expectRevert(bytes4)"
  ): TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "expectRevert(bytes)"
  ): TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "expectRevert()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fee"
  ): TypedContractMethod<[arg0: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ffi"
  ): TypedContractMethod<[arg0: string[]], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "getCode"
  ): TypedContractMethod<[arg0: string], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "getDeployedCode"
  ): TypedContractMethod<[arg0: string], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "getNonce"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "getRecordedLogs"
  ): TypedContractMethod<[], [Vm.LogStructOutput[]], "nonpayable">;
  getFunction(
    nameOrSignature: "isPersistent"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "label"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "load"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "makePersistent(address[])"
  ): TypedContractMethod<[arg0: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "makePersistent(address,address)"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "makePersistent(address)"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "makePersistent(address,address,address)"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mockCall(address,uint256,bytes,bytes)"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BytesLike, arg3: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mockCall(address,bytes,bytes)"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike, arg2: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "parseAddress"
  ): TypedContractMethod<[arg0: string], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "parseBool"
  ): TypedContractMethod<[arg0: string], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "parseBytes"
  ): TypedContractMethod<[arg0: string], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "parseBytes32"
  ): TypedContractMethod<[arg0: string], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "parseInt"
  ): TypedContractMethod<[arg0: string], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "parseJson(string)"
  ): TypedContractMethod<[arg0: string], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "parseJson(string,string)"
  ): TypedContractMethod<[arg0: string, arg1: string], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "parseUint"
  ): TypedContractMethod<[arg0: string], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "prank(address,address)"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "prank(address)"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "projectRoot"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "readFile"
  ): TypedContractMethod<[arg0: string], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "readFileBinary"
  ): TypedContractMethod<[arg0: string], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "readLine"
  ): TypedContractMethod<[arg0: string], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "record"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "recordLogs"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rememberKey"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "removeFile"
  ): TypedContractMethod<[arg0: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revertTo"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "revokePersistent(address[])"
  ): TypedContractMethod<[arg0: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokePersistent(address)"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "roll"
  ): TypedContractMethod<[arg0: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rollFork(bytes32)"
  ): TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rollFork(uint256,uint256)"
  ): TypedContractMethod<
    [forkId: BigNumberish, blockNumber: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rollFork(uint256)"
  ): TypedContractMethod<[arg0: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rollFork(uint256,bytes32)"
  ): TypedContractMethod<
    [forkId: BigNumberish, transaction: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rpcUrl"
  ): TypedContractMethod<[arg0: string], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "rpcUrls"
  ): TypedContractMethod<[], [[string, string][]], "nonpayable">;
  getFunction(
    nameOrSignature: "selectFork"
  ): TypedContractMethod<[arg0: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEnv"
  ): TypedContractMethod<[arg0: string, arg1: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNonce"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sign"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [[bigint, string, string]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "snapshot"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "startBroadcast()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startBroadcast(address)"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startBroadcast(uint256)"
  ): TypedContractMethod<[arg0: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startPrank(address)"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startPrank(address,address)"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stopBroadcast"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stopPrank"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "store"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike, arg2: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "toString(address)"
  ): TypedContractMethod<[arg0: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "toString(uint256)"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "toString(bytes)"
  ): TypedContractMethod<[arg0: BytesLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "toString(bool)"
  ): TypedContractMethod<[arg0: boolean], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "toString(int256)"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "toString(bytes32)"
  ): TypedContractMethod<[arg0: BytesLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "transact(uint256,bytes32)"
  ): TypedContractMethod<
    [forkId: BigNumberish, txHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transact(bytes32)"
  ): TypedContractMethod<[txHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "warp"
  ): TypedContractMethod<[arg0: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "writeFile"
  ): TypedContractMethod<[arg0: string, arg1: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "writeFileBinary"
  ): TypedContractMethod<[arg0: string, arg1: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "writeLine"
  ): TypedContractMethod<[arg0: string, arg1: string], [void], "nonpayable">;

  filters: {};
}
