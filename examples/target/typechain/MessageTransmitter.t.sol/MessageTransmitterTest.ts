/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MessageTransmitterTestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "IS_SCRIPT"
      | "IS_TEST"
      | "addLocalTokenMessenger"
      | "assertContractIsPausable"
      | "assertContractIsRescuable"
      | "expectRevertWithWrongOwner"
      | "expectRevertWithWrongTokenController"
      | "failed"
      | "linkTokenPair"
      | "removeLocalTokenMessenger"
      | "setUp"
      | "testPausable"
      | "testReceiveMessage_doesNotUseNonceOnRevert"
      | "testReceiveMessage_fuzz"
      | "testReceiveMessage_rejectInvalidDestinationDomain"
      | "testReceiveMessage_rejectInvalidMessage"
      | "testReceiveMessage_rejectInvalidVersion"
      | "testReceiveMessage_rejectsAttestationWithAllEmptySigs"
      | "testReceiveMessage_rejectsAttestationWithDuplicateSigners"
      | "testReceiveMessage_rejectsAttestationWithOutOfOrderSigners"
      | "testReceiveMessage_rejectsAttestationWithSingleEmptySigPrefix"
      | "testReceiveMessage_rejectsAttestationWithTooManySignatures"
      | "testReceiveMessage_rejectsAttestionWithRandomNumberOfBytesOfInvalidLength"
      | "testReceiveMessage_rejectsAttestionWithTooFewSignatures"
      | "testReceiveMessage_rejectsMessageIfNonzeroDestinationCallerDoesNotMatchSender"
      | "testReceiveMessage_rejectsMessageOfLengthZero"
      | "testReceiveMessage_rejectsNotEnabledSigner"
      | "testReceiveMessage_rejectsReusedNonceFromReentrantCaller"
      | "testReceiveMessage_rejectsReusedNonceInSeparateMessage"
      | "testReceiveMessage_rejectsSignatureOfLengthZero"
      | "testReceiveMessage_revertsIfHandleReceiveMessageReturnsFalse"
      | "testReceiveMessage_revertsWhenPaused"
      | "testReceiveMessage_succeedsFor2of3Multisig"
      | "testReceiveMessage_succeedsWithNonzeroDestinationCaller"
      | "testReceiveMessage_succeedsfor2of2Multisig"
      | "testReplaceMessage_revertsOnInvalidMessage"
      | "testReplaceMessage_revertsOnInvalidSignature"
      | "testReplaceMessage_revertsOnWrongSender"
      | "testReplaceMessage_revertsOnWrongSourceDomain"
      | "testReplaceMessage_revertsWhenPaused"
      | "testReplaceMessage_succeeds"
      | "testReplaceMessage_succeedsButFailsToReserveNonceInReceiveMessage"
      | "testRescuable"
      | "testSendAndReceiveMessage"
      | "testSendMaxMessageBodySize_revertsOnNonOwner"
      | "testSendMessageWithCaller_rejectsZeroCaller"
      | "testSendMessage_fuzz"
      | "testSendMessage_rejectsTooLargeMessage"
      | "testSendMessage_rejectsZeroRecipient"
      | "testSendMessage_revertsWhenPaused"
      | "testSetMaxMessageBodySize"
      | "testTransferOwnershipAndAcceptOwnership"
      | "testTransferOwnershipWithoutAcceptingThenTransferToNewOwner"
      | "transferOwnershipAndAcceptOwnership"
      | "transferOwnershipWithoutAcceptingThenTransferToNewOwner"
      | "vm"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LocalTokenMessengerAdded"
      | "LocalTokenMessengerRemoved"
      | "MaxMessageBodySizeUpdated"
      | "MessageReceived"
      | "MessageSent"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "Pause"
      | "PauserChanged"
      | "Unpause"
      | "log"
      | "log_address"
      | "log_array(uint256[])"
      | "log_array(int256[])"
      | "log_array(address[])"
      | "log_bytes"
      | "log_bytes32"
      | "log_int"
      | "log_named_address"
      | "log_named_array(string,uint256[])"
      | "log_named_array(string,int256[])"
      | "log_named_array(string,address[])"
      | "log_named_bytes"
      | "log_named_bytes32"
      | "log_named_decimal_int"
      | "log_named_decimal_uint"
      | "log_named_int"
      | "log_named_string"
      | "log_named_uint"
      | "log_string"
      | "log_uint"
      | "logs"
  ): EventFragment;

  encodeFunctionData(functionFragment: "IS_SCRIPT", values?: undefined): string;
  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLocalTokenMessenger",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assertContractIsPausable",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assertContractIsRescuable",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expectRevertWithWrongOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expectRevertWithWrongTokenController",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "linkTokenPair",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLocalTokenMessenger",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "testPausable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testReceiveMessage_doesNotUseNonceOnRevert",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testReceiveMessage_fuzz",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testReceiveMessage_rejectInvalidDestinationDomain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testReceiveMessage_rejectInvalidMessage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testReceiveMessage_rejectInvalidVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testReceiveMessage_rejectsAttestationWithAllEmptySigs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testReceiveMessage_rejectsAttestationWithDuplicateSigners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testReceiveMessage_rejectsAttestationWithOutOfOrderSigners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testReceiveMessage_rejectsAttestationWithSingleEmptySigPrefix",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testReceiveMessage_rejectsAttestationWithTooManySignatures",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testReceiveMessage_rejectsAttestionWithRandomNumberOfBytesOfInvalidLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testReceiveMessage_rejectsAttestionWithTooFewSignatures",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testReceiveMessage_rejectsMessageIfNonzeroDestinationCallerDoesNotMatchSender",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testReceiveMessage_rejectsMessageOfLengthZero",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testReceiveMessage_rejectsNotEnabledSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testReceiveMessage_rejectsReusedNonceFromReentrantCaller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testReceiveMessage_rejectsReusedNonceInSeparateMessage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testReceiveMessage_rejectsSignatureOfLengthZero",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testReceiveMessage_revertsIfHandleReceiveMessageReturnsFalse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testReceiveMessage_revertsWhenPaused",
    values: [BytesLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testReceiveMessage_succeedsFor2of3Multisig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testReceiveMessage_succeedsWithNonzeroDestinationCaller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testReceiveMessage_succeedsfor2of2Multisig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testReplaceMessage_revertsOnInvalidMessage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testReplaceMessage_revertsOnInvalidSignature",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testReplaceMessage_revertsOnWrongSender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testReplaceMessage_revertsOnWrongSourceDomain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testReplaceMessage_revertsWhenPaused",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testReplaceMessage_succeeds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testReplaceMessage_succeedsButFailsToReserveNonceInReceiveMessage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testRescuable",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testSendAndReceiveMessage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testSendMaxMessageBodySize_revertsOnNonOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testSendMessageWithCaller_rejectsZeroCaller",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testSendMessage_fuzz",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testSendMessage_rejectsTooLargeMessage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testSendMessage_rejectsZeroRecipient",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testSendMessage_revertsWhenPaused",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testSetMaxMessageBodySize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testTransferOwnershipAndAcceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testTransferOwnershipWithoutAcceptingThenTransferToNewOwner",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnershipAndAcceptOwnership",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnershipWithoutAcceptingThenTransferToNewOwner",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "vm", values?: undefined): string;

  decodeFunctionResult(functionFragment: "IS_SCRIPT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLocalTokenMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertContractIsPausable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertContractIsRescuable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expectRevertWithWrongOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expectRevertWithWrongTokenController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "linkTokenPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLocalTokenMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testPausable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReceiveMessage_doesNotUseNonceOnRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReceiveMessage_fuzz",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReceiveMessage_rejectInvalidDestinationDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReceiveMessage_rejectInvalidMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReceiveMessage_rejectInvalidVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReceiveMessage_rejectsAttestationWithAllEmptySigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReceiveMessage_rejectsAttestationWithDuplicateSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReceiveMessage_rejectsAttestationWithOutOfOrderSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReceiveMessage_rejectsAttestationWithSingleEmptySigPrefix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReceiveMessage_rejectsAttestationWithTooManySignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReceiveMessage_rejectsAttestionWithRandomNumberOfBytesOfInvalidLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReceiveMessage_rejectsAttestionWithTooFewSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReceiveMessage_rejectsMessageIfNonzeroDestinationCallerDoesNotMatchSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReceiveMessage_rejectsMessageOfLengthZero",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReceiveMessage_rejectsNotEnabledSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReceiveMessage_rejectsReusedNonceFromReentrantCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReceiveMessage_rejectsReusedNonceInSeparateMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReceiveMessage_rejectsSignatureOfLengthZero",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReceiveMessage_revertsIfHandleReceiveMessageReturnsFalse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReceiveMessage_revertsWhenPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReceiveMessage_succeedsFor2of3Multisig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReceiveMessage_succeedsWithNonzeroDestinationCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReceiveMessage_succeedsfor2of2Multisig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReplaceMessage_revertsOnInvalidMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReplaceMessage_revertsOnInvalidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReplaceMessage_revertsOnWrongSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReplaceMessage_revertsOnWrongSourceDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReplaceMessage_revertsWhenPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReplaceMessage_succeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReplaceMessage_succeedsButFailsToReserveNonceInReceiveMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRescuable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSendAndReceiveMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSendMaxMessageBodySize_revertsOnNonOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSendMessageWithCaller_rejectsZeroCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSendMessage_fuzz",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSendMessage_rejectsTooLargeMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSendMessage_rejectsZeroRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSendMessage_revertsWhenPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSetMaxMessageBodySize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testTransferOwnershipAndAcceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testTransferOwnershipWithoutAcceptingThenTransferToNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnershipAndAcceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnershipWithoutAcceptingThenTransferToNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vm", data: BytesLike): Result;
}

export namespace LocalTokenMessengerAddedEvent {
  export type InputTuple = [localTokenMessenger: AddressLike];
  export type OutputTuple = [localTokenMessenger: string];
  export interface OutputObject {
    localTokenMessenger: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LocalTokenMessengerRemovedEvent {
  export type InputTuple = [localTokenMessenger: AddressLike];
  export type OutputTuple = [localTokenMessenger: string];
  export interface OutputObject {
    localTokenMessenger: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxMessageBodySizeUpdatedEvent {
  export type InputTuple = [newMaxMessageBodySize: BigNumberish];
  export type OutputTuple = [newMaxMessageBodySize: bigint];
  export interface OutputObject {
    newMaxMessageBodySize: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageReceivedEvent {
  export type InputTuple = [
    caller: AddressLike,
    sourceDomain: BigNumberish,
    nonce: BigNumberish,
    sender: BytesLike,
    messageBody: BytesLike
  ];
  export type OutputTuple = [
    caller: string,
    sourceDomain: bigint,
    nonce: bigint,
    sender: string,
    messageBody: string
  ];
  export interface OutputObject {
    caller: string;
    sourceDomain: bigint;
    nonce: bigint;
    sender: string;
    messageBody: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageSentEvent {
  export type InputTuple = [message: BytesLike];
  export type OutputTuple = [message: string];
  export interface OutputObject {
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauseEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauserChangedEvent {
  export type InputTuple = [newAddress: AddressLike];
  export type OutputTuple = [newAddress: string];
  export interface OutputObject {
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpauseEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace logEvent {
  export type InputTuple = [arg0: string];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_addressEvent {
  export type InputTuple = [arg0: AddressLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_array_uint256_array_Event {
  export type InputTuple = [val: BigNumberish[]];
  export type OutputTuple = [val: bigint[]];
  export interface OutputObject {
    val: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_array_int256_array_Event {
  export type InputTuple = [val: BigNumberish[]];
  export type OutputTuple = [val: bigint[]];
  export interface OutputObject {
    val: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_array_address_array_Event {
  export type InputTuple = [val: AddressLike[]];
  export type OutputTuple = [val: string[]];
  export interface OutputObject {
    val: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_bytesEvent {
  export type InputTuple = [arg0: BytesLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_bytes32Event {
  export type InputTuple = [arg0: BytesLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_intEvent {
  export type InputTuple = [arg0: BigNumberish];
  export type OutputTuple = [arg0: bigint];
  export interface OutputObject {
    arg0: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_addressEvent {
  export type InputTuple = [key: string, val: AddressLike];
  export type OutputTuple = [key: string, val: string];
  export interface OutputObject {
    key: string;
    val: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_array_string_uint256_array_Event {
  export type InputTuple = [key: string, val: BigNumberish[]];
  export type OutputTuple = [key: string, val: bigint[]];
  export interface OutputObject {
    key: string;
    val: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_array_string_int256_array_Event {
  export type InputTuple = [key: string, val: BigNumberish[]];
  export type OutputTuple = [key: string, val: bigint[]];
  export interface OutputObject {
    key: string;
    val: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_array_string_address_array_Event {
  export type InputTuple = [key: string, val: AddressLike[]];
  export type OutputTuple = [key: string, val: string[]];
  export interface OutputObject {
    key: string;
    val: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_bytesEvent {
  export type InputTuple = [key: string, val: BytesLike];
  export type OutputTuple = [key: string, val: string];
  export interface OutputObject {
    key: string;
    val: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_bytes32Event {
  export type InputTuple = [key: string, val: BytesLike];
  export type OutputTuple = [key: string, val: string];
  export interface OutputObject {
    key: string;
    val: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_decimal_intEvent {
  export type InputTuple = [
    key: string,
    val: BigNumberish,
    decimals: BigNumberish
  ];
  export type OutputTuple = [key: string, val: bigint, decimals: bigint];
  export interface OutputObject {
    key: string;
    val: bigint;
    decimals: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_decimal_uintEvent {
  export type InputTuple = [
    key: string,
    val: BigNumberish,
    decimals: BigNumberish
  ];
  export type OutputTuple = [key: string, val: bigint, decimals: bigint];
  export interface OutputObject {
    key: string;
    val: bigint;
    decimals: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_intEvent {
  export type InputTuple = [key: string, val: BigNumberish];
  export type OutputTuple = [key: string, val: bigint];
  export interface OutputObject {
    key: string;
    val: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_stringEvent {
  export type InputTuple = [key: string, val: string];
  export type OutputTuple = [key: string, val: string];
  export interface OutputObject {
    key: string;
    val: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_uintEvent {
  export type InputTuple = [key: string, val: BigNumberish];
  export type OutputTuple = [key: string, val: bigint];
  export interface OutputObject {
    key: string;
    val: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_stringEvent {
  export type InputTuple = [arg0: string];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_uintEvent {
  export type InputTuple = [arg0: BigNumberish];
  export type OutputTuple = [arg0: bigint];
  export interface OutputObject {
    arg0: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace logsEvent {
  export type InputTuple = [arg0: BytesLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MessageTransmitterTest extends BaseContract {
  connect(runner?: ContractRunner | null): MessageTransmitterTest;
  waitForDeployment(): Promise<this>;

  interface: MessageTransmitterTestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  IS_SCRIPT: TypedContractMethod<[], [boolean], "view">;

  IS_TEST: TypedContractMethod<[], [boolean], "view">;

  addLocalTokenMessenger: TypedContractMethod<
    [_tokenMinter: AddressLike, _localTokenMessenger: AddressLike],
    [void],
    "nonpayable"
  >;

  assertContractIsPausable: TypedContractMethod<
    [
      _pausableContractAddress: AddressLike,
      _currentPauser: AddressLike,
      _newPauser: AddressLike,
      _owner: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  assertContractIsRescuable: TypedContractMethod<
    [
      _rescuableContractAddress: AddressLike,
      _rescuer: AddressLike,
      _rescueRecipient: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  expectRevertWithWrongOwner: TypedContractMethod<[], [void], "nonpayable">;

  expectRevertWithWrongTokenController: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  failed: TypedContractMethod<[], [boolean], "nonpayable">;

  linkTokenPair: TypedContractMethod<
    [
      tokenMinter: AddressLike,
      _localToken: AddressLike,
      _remoteDomain: BigNumberish,
      _remoteTokenBytes32: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  removeLocalTokenMessenger: TypedContractMethod<
    [_tokenMinter: AddressLike],
    [void],
    "nonpayable"
  >;

  setUp: TypedContractMethod<[], [void], "nonpayable">;

  testPausable: TypedContractMethod<
    [_newPauser: AddressLike],
    [void],
    "nonpayable"
  >;

  testReceiveMessage_doesNotUseNonceOnRevert: TypedContractMethod<
    [_nonce: BigNumberish],
    [void],
    "nonpayable"
  >;

  testReceiveMessage_fuzz: TypedContractMethod<
    [
      _caller: AddressLike,
      _sourceDomain: BigNumberish,
      _nonce: BigNumberish,
      _sender: BytesLike,
      _messageBody: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  testReceiveMessage_rejectInvalidDestinationDomain: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testReceiveMessage_rejectInvalidMessage: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testReceiveMessage_rejectInvalidVersion: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testReceiveMessage_rejectsAttestationWithAllEmptySigs: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testReceiveMessage_rejectsAttestationWithDuplicateSigners: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testReceiveMessage_rejectsAttestationWithOutOfOrderSigners: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testReceiveMessage_rejectsAttestationWithSingleEmptySigPrefix: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testReceiveMessage_rejectsAttestationWithTooManySignatures: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testReceiveMessage_rejectsAttestionWithRandomNumberOfBytesOfInvalidLength: TypedContractMethod<
    [_numberOfBytes: BigNumberish],
    [void],
    "nonpayable"
  >;

  testReceiveMessage_rejectsAttestionWithTooFewSignatures: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testReceiveMessage_rejectsMessageIfNonzeroDestinationCallerDoesNotMatchSender: TypedContractMethod<
    [
      _sourceDomain: BigNumberish,
      _nonce: BigNumberish,
      _sender: BytesLike,
      _recipient: BytesLike,
      _messageBody: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  testReceiveMessage_rejectsMessageOfLengthZero: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testReceiveMessage_rejectsNotEnabledSigner: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testReceiveMessage_rejectsReusedNonceFromReentrantCaller: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testReceiveMessage_rejectsReusedNonceInSeparateMessage: TypedContractMethod<
    [_caller: AddressLike],
    [void],
    "nonpayable"
  >;

  testReceiveMessage_rejectsSignatureOfLengthZero: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testReceiveMessage_revertsIfHandleReceiveMessageReturnsFalse: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testReceiveMessage_revertsWhenPaused: TypedContractMethod<
    [_message: BytesLike, _signature: BytesLike, _caller: AddressLike],
    [void],
    "nonpayable"
  >;

  testReceiveMessage_succeedsFor2of3Multisig: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testReceiveMessage_succeedsWithNonzeroDestinationCaller: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testReceiveMessage_succeedsfor2of2Multisig: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testReplaceMessage_revertsOnInvalidMessage: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testReplaceMessage_revertsOnInvalidSignature: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testReplaceMessage_revertsOnWrongSender: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testReplaceMessage_revertsOnWrongSourceDomain: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testReplaceMessage_revertsWhenPaused: TypedContractMethod<
    [
      _originalMessage: BytesLike,
      _originalAttestation: BytesLike,
      _newMessageBody: BytesLike,
      _newDestinationCaller: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  testReplaceMessage_succeeds: TypedContractMethod<
    [_newDestinationCallerAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  testReplaceMessage_succeedsButFailsToReserveNonceInReceiveMessage: TypedContractMethod<
    [_newDestinationCallerAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  testRescuable: TypedContractMethod<
    [
      _rescuer: AddressLike,
      _rescueRecipient: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  testSendAndReceiveMessage: TypedContractMethod<
    [_caller: AddressLike],
    [void],
    "nonpayable"
  >;

  testSendMaxMessageBodySize_revertsOnNonOwner: TypedContractMethod<
    [_newMaxMessageBodySize: BigNumberish],
    [void],
    "nonpayable"
  >;

  testSendMessageWithCaller_rejectsZeroCaller: TypedContractMethod<
    [
      _nonce: BigNumberish,
      _version: BigNumberish,
      _sourceDomain: BigNumberish,
      _destinationDomain: BigNumberish,
      _sender: BytesLike,
      _recipient: BytesLike,
      _messageBody: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  testSendMessage_fuzz: TypedContractMethod<
    [_destinationDomain: BigNumberish],
    [void],
    "nonpayable"
  >;

  testSendMessage_rejectsTooLargeMessage: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testSendMessage_rejectsZeroRecipient: TypedContractMethod<
    [_destinationDomain: BigNumberish, _messageBody: BytesLike],
    [void],
    "nonpayable"
  >;

  testSendMessage_revertsWhenPaused: TypedContractMethod<
    [_destinationDomain: BigNumberish, _messageBody: BytesLike],
    [void],
    "nonpayable"
  >;

  testSetMaxMessageBodySize: TypedContractMethod<[], [void], "nonpayable">;

  testTransferOwnershipAndAcceptOwnership: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testTransferOwnershipWithoutAcceptingThenTransferToNewOwner: TypedContractMethod<
    [_newOwner: AddressLike, _secondNewOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnershipAndAcceptOwnership: TypedContractMethod<
    [_ownableContractAddress: AddressLike, _newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnershipWithoutAcceptingThenTransferToNewOwner: TypedContractMethod<
    [
      _ownableContractAddress: AddressLike,
      _newOwner: AddressLike,
      _secondNewOwner: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  vm: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "IS_SCRIPT"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "IS_TEST"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "addLocalTokenMessenger"
  ): TypedContractMethod<
    [_tokenMinter: AddressLike, _localTokenMessenger: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "assertContractIsPausable"
  ): TypedContractMethod<
    [
      _pausableContractAddress: AddressLike,
      _currentPauser: AddressLike,
      _newPauser: AddressLike,
      _owner: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "assertContractIsRescuable"
  ): TypedContractMethod<
    [
      _rescuableContractAddress: AddressLike,
      _rescuer: AddressLike,
      _rescueRecipient: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "expectRevertWithWrongOwner"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "expectRevertWithWrongTokenController"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "failed"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "linkTokenPair"
  ): TypedContractMethod<
    [
      tokenMinter: AddressLike,
      _localToken: AddressLike,
      _remoteDomain: BigNumberish,
      _remoteTokenBytes32: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLocalTokenMessenger"
  ): TypedContractMethod<[_tokenMinter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUp"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testPausable"
  ): TypedContractMethod<[_newPauser: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testReceiveMessage_doesNotUseNonceOnRevert"
  ): TypedContractMethod<[_nonce: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testReceiveMessage_fuzz"
  ): TypedContractMethod<
    [
      _caller: AddressLike,
      _sourceDomain: BigNumberish,
      _nonce: BigNumberish,
      _sender: BytesLike,
      _messageBody: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testReceiveMessage_rejectInvalidDestinationDomain"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testReceiveMessage_rejectInvalidMessage"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testReceiveMessage_rejectInvalidVersion"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testReceiveMessage_rejectsAttestationWithAllEmptySigs"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testReceiveMessage_rejectsAttestationWithDuplicateSigners"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testReceiveMessage_rejectsAttestationWithOutOfOrderSigners"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testReceiveMessage_rejectsAttestationWithSingleEmptySigPrefix"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testReceiveMessage_rejectsAttestationWithTooManySignatures"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testReceiveMessage_rejectsAttestionWithRandomNumberOfBytesOfInvalidLength"
  ): TypedContractMethod<[_numberOfBytes: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testReceiveMessage_rejectsAttestionWithTooFewSignatures"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testReceiveMessage_rejectsMessageIfNonzeroDestinationCallerDoesNotMatchSender"
  ): TypedContractMethod<
    [
      _sourceDomain: BigNumberish,
      _nonce: BigNumberish,
      _sender: BytesLike,
      _recipient: BytesLike,
      _messageBody: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testReceiveMessage_rejectsMessageOfLengthZero"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testReceiveMessage_rejectsNotEnabledSigner"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testReceiveMessage_rejectsReusedNonceFromReentrantCaller"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testReceiveMessage_rejectsReusedNonceInSeparateMessage"
  ): TypedContractMethod<[_caller: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testReceiveMessage_rejectsSignatureOfLengthZero"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testReceiveMessage_revertsIfHandleReceiveMessageReturnsFalse"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testReceiveMessage_revertsWhenPaused"
  ): TypedContractMethod<
    [_message: BytesLike, _signature: BytesLike, _caller: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testReceiveMessage_succeedsFor2of3Multisig"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testReceiveMessage_succeedsWithNonzeroDestinationCaller"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testReceiveMessage_succeedsfor2of2Multisig"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testReplaceMessage_revertsOnInvalidMessage"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testReplaceMessage_revertsOnInvalidSignature"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testReplaceMessage_revertsOnWrongSender"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testReplaceMessage_revertsOnWrongSourceDomain"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testReplaceMessage_revertsWhenPaused"
  ): TypedContractMethod<
    [
      _originalMessage: BytesLike,
      _originalAttestation: BytesLike,
      _newMessageBody: BytesLike,
      _newDestinationCaller: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testReplaceMessage_succeeds"
  ): TypedContractMethod<
    [_newDestinationCallerAddr: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testReplaceMessage_succeedsButFailsToReserveNonceInReceiveMessage"
  ): TypedContractMethod<
    [_newDestinationCallerAddr: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testRescuable"
  ): TypedContractMethod<
    [
      _rescuer: AddressLike,
      _rescueRecipient: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testSendAndReceiveMessage"
  ): TypedContractMethod<[_caller: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testSendMaxMessageBodySize_revertsOnNonOwner"
  ): TypedContractMethod<
    [_newMaxMessageBodySize: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testSendMessageWithCaller_rejectsZeroCaller"
  ): TypedContractMethod<
    [
      _nonce: BigNumberish,
      _version: BigNumberish,
      _sourceDomain: BigNumberish,
      _destinationDomain: BigNumberish,
      _sender: BytesLike,
      _recipient: BytesLike,
      _messageBody: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testSendMessage_fuzz"
  ): TypedContractMethod<
    [_destinationDomain: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testSendMessage_rejectsTooLargeMessage"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testSendMessage_rejectsZeroRecipient"
  ): TypedContractMethod<
    [_destinationDomain: BigNumberish, _messageBody: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testSendMessage_revertsWhenPaused"
  ): TypedContractMethod<
    [_destinationDomain: BigNumberish, _messageBody: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testSetMaxMessageBodySize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testTransferOwnershipAndAcceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testTransferOwnershipWithoutAcceptingThenTransferToNewOwner"
  ): TypedContractMethod<
    [_newOwner: AddressLike, _secondNewOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnershipAndAcceptOwnership"
  ): TypedContractMethod<
    [_ownableContractAddress: AddressLike, _newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnershipWithoutAcceptingThenTransferToNewOwner"
  ): TypedContractMethod<
    [
      _ownableContractAddress: AddressLike,
      _newOwner: AddressLike,
      _secondNewOwner: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(nameOrSignature: "vm"): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "LocalTokenMessengerAdded"
  ): TypedContractEvent<
    LocalTokenMessengerAddedEvent.InputTuple,
    LocalTokenMessengerAddedEvent.OutputTuple,
    LocalTokenMessengerAddedEvent.OutputObject
  >;
  getEvent(
    key: "LocalTokenMessengerRemoved"
  ): TypedContractEvent<
    LocalTokenMessengerRemovedEvent.InputTuple,
    LocalTokenMessengerRemovedEvent.OutputTuple,
    LocalTokenMessengerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "MaxMessageBodySizeUpdated"
  ): TypedContractEvent<
    MaxMessageBodySizeUpdatedEvent.InputTuple,
    MaxMessageBodySizeUpdatedEvent.OutputTuple,
    MaxMessageBodySizeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MessageReceived"
  ): TypedContractEvent<
    MessageReceivedEvent.InputTuple,
    MessageReceivedEvent.OutputTuple,
    MessageReceivedEvent.OutputObject
  >;
  getEvent(
    key: "MessageSent"
  ): TypedContractEvent<
    MessageSentEvent.InputTuple,
    MessageSentEvent.OutputTuple,
    MessageSentEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Pause"
  ): TypedContractEvent<
    PauseEvent.InputTuple,
    PauseEvent.OutputTuple,
    PauseEvent.OutputObject
  >;
  getEvent(
    key: "PauserChanged"
  ): TypedContractEvent<
    PauserChangedEvent.InputTuple,
    PauserChangedEvent.OutputTuple,
    PauserChangedEvent.OutputObject
  >;
  getEvent(
    key: "Unpause"
  ): TypedContractEvent<
    UnpauseEvent.InputTuple,
    UnpauseEvent.OutputTuple,
    UnpauseEvent.OutputObject
  >;
  getEvent(
    key: "log"
  ): TypedContractEvent<
    logEvent.InputTuple,
    logEvent.OutputTuple,
    logEvent.OutputObject
  >;
  getEvent(
    key: "log_address"
  ): TypedContractEvent<
    log_addressEvent.InputTuple,
    log_addressEvent.OutputTuple,
    log_addressEvent.OutputObject
  >;
  getEvent(
    key: "log_array(uint256[])"
  ): TypedContractEvent<
    log_array_uint256_array_Event.InputTuple,
    log_array_uint256_array_Event.OutputTuple,
    log_array_uint256_array_Event.OutputObject
  >;
  getEvent(
    key: "log_array(int256[])"
  ): TypedContractEvent<
    log_array_int256_array_Event.InputTuple,
    log_array_int256_array_Event.OutputTuple,
    log_array_int256_array_Event.OutputObject
  >;
  getEvent(
    key: "log_array(address[])"
  ): TypedContractEvent<
    log_array_address_array_Event.InputTuple,
    log_array_address_array_Event.OutputTuple,
    log_array_address_array_Event.OutputObject
  >;
  getEvent(
    key: "log_bytes"
  ): TypedContractEvent<
    log_bytesEvent.InputTuple,
    log_bytesEvent.OutputTuple,
    log_bytesEvent.OutputObject
  >;
  getEvent(
    key: "log_bytes32"
  ): TypedContractEvent<
    log_bytes32Event.InputTuple,
    log_bytes32Event.OutputTuple,
    log_bytes32Event.OutputObject
  >;
  getEvent(
    key: "log_int"
  ): TypedContractEvent<
    log_intEvent.InputTuple,
    log_intEvent.OutputTuple,
    log_intEvent.OutputObject
  >;
  getEvent(
    key: "log_named_address"
  ): TypedContractEvent<
    log_named_addressEvent.InputTuple,
    log_named_addressEvent.OutputTuple,
    log_named_addressEvent.OutputObject
  >;
  getEvent(
    key: "log_named_array(string,uint256[])"
  ): TypedContractEvent<
    log_named_array_string_uint256_array_Event.InputTuple,
    log_named_array_string_uint256_array_Event.OutputTuple,
    log_named_array_string_uint256_array_Event.OutputObject
  >;
  getEvent(
    key: "log_named_array(string,int256[])"
  ): TypedContractEvent<
    log_named_array_string_int256_array_Event.InputTuple,
    log_named_array_string_int256_array_Event.OutputTuple,
    log_named_array_string_int256_array_Event.OutputObject
  >;
  getEvent(
    key: "log_named_array(string,address[])"
  ): TypedContractEvent<
    log_named_array_string_address_array_Event.InputTuple,
    log_named_array_string_address_array_Event.OutputTuple,
    log_named_array_string_address_array_Event.OutputObject
  >;
  getEvent(
    key: "log_named_bytes"
  ): TypedContractEvent<
    log_named_bytesEvent.InputTuple,
    log_named_bytesEvent.OutputTuple,
    log_named_bytesEvent.OutputObject
  >;
  getEvent(
    key: "log_named_bytes32"
  ): TypedContractEvent<
    log_named_bytes32Event.InputTuple,
    log_named_bytes32Event.OutputTuple,
    log_named_bytes32Event.OutputObject
  >;
  getEvent(
    key: "log_named_decimal_int"
  ): TypedContractEvent<
    log_named_decimal_intEvent.InputTuple,
    log_named_decimal_intEvent.OutputTuple,
    log_named_decimal_intEvent.OutputObject
  >;
  getEvent(
    key: "log_named_decimal_uint"
  ): TypedContractEvent<
    log_named_decimal_uintEvent.InputTuple,
    log_named_decimal_uintEvent.OutputTuple,
    log_named_decimal_uintEvent.OutputObject
  >;
  getEvent(
    key: "log_named_int"
  ): TypedContractEvent<
    log_named_intEvent.InputTuple,
    log_named_intEvent.OutputTuple,
    log_named_intEvent.OutputObject
  >;
  getEvent(
    key: "log_named_string"
  ): TypedContractEvent<
    log_named_stringEvent.InputTuple,
    log_named_stringEvent.OutputTuple,
    log_named_stringEvent.OutputObject
  >;
  getEvent(
    key: "log_named_uint"
  ): TypedContractEvent<
    log_named_uintEvent.InputTuple,
    log_named_uintEvent.OutputTuple,
    log_named_uintEvent.OutputObject
  >;
  getEvent(
    key: "log_string"
  ): TypedContractEvent<
    log_stringEvent.InputTuple,
    log_stringEvent.OutputTuple,
    log_stringEvent.OutputObject
  >;
  getEvent(
    key: "log_uint"
  ): TypedContractEvent<
    log_uintEvent.InputTuple,
    log_uintEvent.OutputTuple,
    log_uintEvent.OutputObject
  >;
  getEvent(
    key: "logs"
  ): TypedContractEvent<
    logsEvent.InputTuple,
    logsEvent.OutputTuple,
    logsEvent.OutputObject
  >;

  filters: {
    "LocalTokenMessengerAdded(address)": TypedContractEvent<
      LocalTokenMessengerAddedEvent.InputTuple,
      LocalTokenMessengerAddedEvent.OutputTuple,
      LocalTokenMessengerAddedEvent.OutputObject
    >;
    LocalTokenMessengerAdded: TypedContractEvent<
      LocalTokenMessengerAddedEvent.InputTuple,
      LocalTokenMessengerAddedEvent.OutputTuple,
      LocalTokenMessengerAddedEvent.OutputObject
    >;

    "LocalTokenMessengerRemoved(address)": TypedContractEvent<
      LocalTokenMessengerRemovedEvent.InputTuple,
      LocalTokenMessengerRemovedEvent.OutputTuple,
      LocalTokenMessengerRemovedEvent.OutputObject
    >;
    LocalTokenMessengerRemoved: TypedContractEvent<
      LocalTokenMessengerRemovedEvent.InputTuple,
      LocalTokenMessengerRemovedEvent.OutputTuple,
      LocalTokenMessengerRemovedEvent.OutputObject
    >;

    "MaxMessageBodySizeUpdated(uint256)": TypedContractEvent<
      MaxMessageBodySizeUpdatedEvent.InputTuple,
      MaxMessageBodySizeUpdatedEvent.OutputTuple,
      MaxMessageBodySizeUpdatedEvent.OutputObject
    >;
    MaxMessageBodySizeUpdated: TypedContractEvent<
      MaxMessageBodySizeUpdatedEvent.InputTuple,
      MaxMessageBodySizeUpdatedEvent.OutputTuple,
      MaxMessageBodySizeUpdatedEvent.OutputObject
    >;

    "MessageReceived(address,uint32,uint64,bytes32,bytes)": TypedContractEvent<
      MessageReceivedEvent.InputTuple,
      MessageReceivedEvent.OutputTuple,
      MessageReceivedEvent.OutputObject
    >;
    MessageReceived: TypedContractEvent<
      MessageReceivedEvent.InputTuple,
      MessageReceivedEvent.OutputTuple,
      MessageReceivedEvent.OutputObject
    >;

    "MessageSent(bytes)": TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;
    MessageSent: TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Pause()": TypedContractEvent<
      PauseEvent.InputTuple,
      PauseEvent.OutputTuple,
      PauseEvent.OutputObject
    >;
    Pause: TypedContractEvent<
      PauseEvent.InputTuple,
      PauseEvent.OutputTuple,
      PauseEvent.OutputObject
    >;

    "PauserChanged(address)": TypedContractEvent<
      PauserChangedEvent.InputTuple,
      PauserChangedEvent.OutputTuple,
      PauserChangedEvent.OutputObject
    >;
    PauserChanged: TypedContractEvent<
      PauserChangedEvent.InputTuple,
      PauserChangedEvent.OutputTuple,
      PauserChangedEvent.OutputObject
    >;

    "Unpause()": TypedContractEvent<
      UnpauseEvent.InputTuple,
      UnpauseEvent.OutputTuple,
      UnpauseEvent.OutputObject
    >;
    Unpause: TypedContractEvent<
      UnpauseEvent.InputTuple,
      UnpauseEvent.OutputTuple,
      UnpauseEvent.OutputObject
    >;

    "log(string)": TypedContractEvent<
      logEvent.InputTuple,
      logEvent.OutputTuple,
      logEvent.OutputObject
    >;
    log: TypedContractEvent<
      logEvent.InputTuple,
      logEvent.OutputTuple,
      logEvent.OutputObject
    >;

    "log_address(address)": TypedContractEvent<
      log_addressEvent.InputTuple,
      log_addressEvent.OutputTuple,
      log_addressEvent.OutputObject
    >;
    log_address: TypedContractEvent<
      log_addressEvent.InputTuple,
      log_addressEvent.OutputTuple,
      log_addressEvent.OutputObject
    >;

    "log_array(uint256[])": TypedContractEvent<
      log_array_uint256_array_Event.InputTuple,
      log_array_uint256_array_Event.OutputTuple,
      log_array_uint256_array_Event.OutputObject
    >;
    "log_array(int256[])": TypedContractEvent<
      log_array_int256_array_Event.InputTuple,
      log_array_int256_array_Event.OutputTuple,
      log_array_int256_array_Event.OutputObject
    >;
    "log_array(address[])": TypedContractEvent<
      log_array_address_array_Event.InputTuple,
      log_array_address_array_Event.OutputTuple,
      log_array_address_array_Event.OutputObject
    >;

    "log_bytes(bytes)": TypedContractEvent<
      log_bytesEvent.InputTuple,
      log_bytesEvent.OutputTuple,
      log_bytesEvent.OutputObject
    >;
    log_bytes: TypedContractEvent<
      log_bytesEvent.InputTuple,
      log_bytesEvent.OutputTuple,
      log_bytesEvent.OutputObject
    >;

    "log_bytes32(bytes32)": TypedContractEvent<
      log_bytes32Event.InputTuple,
      log_bytes32Event.OutputTuple,
      log_bytes32Event.OutputObject
    >;
    log_bytes32: TypedContractEvent<
      log_bytes32Event.InputTuple,
      log_bytes32Event.OutputTuple,
      log_bytes32Event.OutputObject
    >;

    "log_int(int256)": TypedContractEvent<
      log_intEvent.InputTuple,
      log_intEvent.OutputTuple,
      log_intEvent.OutputObject
    >;
    log_int: TypedContractEvent<
      log_intEvent.InputTuple,
      log_intEvent.OutputTuple,
      log_intEvent.OutputObject
    >;

    "log_named_address(string,address)": TypedContractEvent<
      log_named_addressEvent.InputTuple,
      log_named_addressEvent.OutputTuple,
      log_named_addressEvent.OutputObject
    >;
    log_named_address: TypedContractEvent<
      log_named_addressEvent.InputTuple,
      log_named_addressEvent.OutputTuple,
      log_named_addressEvent.OutputObject
    >;

    "log_named_array(string,uint256[])": TypedContractEvent<
      log_named_array_string_uint256_array_Event.InputTuple,
      log_named_array_string_uint256_array_Event.OutputTuple,
      log_named_array_string_uint256_array_Event.OutputObject
    >;
    "log_named_array(string,int256[])": TypedContractEvent<
      log_named_array_string_int256_array_Event.InputTuple,
      log_named_array_string_int256_array_Event.OutputTuple,
      log_named_array_string_int256_array_Event.OutputObject
    >;
    "log_named_array(string,address[])": TypedContractEvent<
      log_named_array_string_address_array_Event.InputTuple,
      log_named_array_string_address_array_Event.OutputTuple,
      log_named_array_string_address_array_Event.OutputObject
    >;

    "log_named_bytes(string,bytes)": TypedContractEvent<
      log_named_bytesEvent.InputTuple,
      log_named_bytesEvent.OutputTuple,
      log_named_bytesEvent.OutputObject
    >;
    log_named_bytes: TypedContractEvent<
      log_named_bytesEvent.InputTuple,
      log_named_bytesEvent.OutputTuple,
      log_named_bytesEvent.OutputObject
    >;

    "log_named_bytes32(string,bytes32)": TypedContractEvent<
      log_named_bytes32Event.InputTuple,
      log_named_bytes32Event.OutputTuple,
      log_named_bytes32Event.OutputObject
    >;
    log_named_bytes32: TypedContractEvent<
      log_named_bytes32Event.InputTuple,
      log_named_bytes32Event.OutputTuple,
      log_named_bytes32Event.OutputObject
    >;

    "log_named_decimal_int(string,int256,uint256)": TypedContractEvent<
      log_named_decimal_intEvent.InputTuple,
      log_named_decimal_intEvent.OutputTuple,
      log_named_decimal_intEvent.OutputObject
    >;
    log_named_decimal_int: TypedContractEvent<
      log_named_decimal_intEvent.InputTuple,
      log_named_decimal_intEvent.OutputTuple,
      log_named_decimal_intEvent.OutputObject
    >;

    "log_named_decimal_uint(string,uint256,uint256)": TypedContractEvent<
      log_named_decimal_uintEvent.InputTuple,
      log_named_decimal_uintEvent.OutputTuple,
      log_named_decimal_uintEvent.OutputObject
    >;
    log_named_decimal_uint: TypedContractEvent<
      log_named_decimal_uintEvent.InputTuple,
      log_named_decimal_uintEvent.OutputTuple,
      log_named_decimal_uintEvent.OutputObject
    >;

    "log_named_int(string,int256)": TypedContractEvent<
      log_named_intEvent.InputTuple,
      log_named_intEvent.OutputTuple,
      log_named_intEvent.OutputObject
    >;
    log_named_int: TypedContractEvent<
      log_named_intEvent.InputTuple,
      log_named_intEvent.OutputTuple,
      log_named_intEvent.OutputObject
    >;

    "log_named_string(string,string)": TypedContractEvent<
      log_named_stringEvent.InputTuple,
      log_named_stringEvent.OutputTuple,
      log_named_stringEvent.OutputObject
    >;
    log_named_string: TypedContractEvent<
      log_named_stringEvent.InputTuple,
      log_named_stringEvent.OutputTuple,
      log_named_stringEvent.OutputObject
    >;

    "log_named_uint(string,uint256)": TypedContractEvent<
      log_named_uintEvent.InputTuple,
      log_named_uintEvent.OutputTuple,
      log_named_uintEvent.OutputObject
    >;
    log_named_uint: TypedContractEvent<
      log_named_uintEvent.InputTuple,
      log_named_uintEvent.OutputTuple,
      log_named_uintEvent.OutputObject
    >;

    "log_string(string)": TypedContractEvent<
      log_stringEvent.InputTuple,
      log_stringEvent.OutputTuple,
      log_stringEvent.OutputObject
    >;
    log_string: TypedContractEvent<
      log_stringEvent.InputTuple,
      log_stringEvent.OutputTuple,
      log_stringEvent.OutputObject
    >;

    "log_uint(uint256)": TypedContractEvent<
      log_uintEvent.InputTuple,
      log_uintEvent.OutputTuple,
      log_uintEvent.OutputObject
    >;
    log_uint: TypedContractEvent<
      log_uintEvent.InputTuple,
      log_uintEvent.OutputTuple,
      log_uintEvent.OutputObject
    >;

    "logs(bytes)": TypedContractEvent<
      logsEvent.InputTuple,
      logsEvent.OutputTuple,
      logsEvent.OutputObject
    >;
    logs: TypedContractEvent<
      logsEvent.InputTuple,
      logsEvent.OutputTuple,
      logsEvent.OutputObject
    >;
  };
}
