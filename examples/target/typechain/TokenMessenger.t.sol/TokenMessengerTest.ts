/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TokenMessengerTestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "IS_SCRIPT"
      | "IS_TEST"
      | "addLocalTokenMessenger"
      | "assertContractIsPausable"
      | "assertContractIsRescuable"
      | "expectRevertWithWrongOwner"
      | "expectRevertWithWrongTokenController"
      | "failed"
      | "linkTokenPair"
      | "removeLocalTokenMessenger"
      | "setUp"
      | "testAddLocalMinter_revertsIfAlreadySet"
      | "testAddLocalMinter_revertsIfZeroAddress"
      | "testAddLocalMinter_revertsOnNonOwner"
      | "testAddLocalMinter_succeeds"
      | "testAddRemoteTokenMessenger_revertsOnExistingRemoteTokenMessenger"
      | "testAddRemoteTokenMessenger_revertsOnNonOwner"
      | "testAddRemoteTokenMessenger_revertsOnZeroAddress"
      | "testAddRemoteTokenMessenger_succeeds"
      | "testConstructor_rejectsZeroAddressLocalMessageTransmitter"
      | "testDepositForBurnWithCaller_rejectsZeroDestinationCaller"
      | "testDepositForBurnWithCaller_returnsNonzeroNonce"
      | "testDepositForBurnWithCaller_revertsIfTransferAmountExceedsMaxBurnAmountPerMessage"
      | "testDepositForBurnWithCaller_revertsIfTransferAmountIsZero"
      | "testDepositForBurnWithCaller_succeeds"
      | "testDepositForBurn_returnsNonzeroNonce"
      | "testDepositForBurn_revertsIfLocalMinterIsNotSet"
      | "testDepositForBurn_revertsIfMintRecipientIsZero"
      | "testDepositForBurn_revertsIfNoRemoteTokenMessengerExistsForDomain"
      | "testDepositForBurn_revertsIfTransferAmountExceedsAllowance"
      | "testDepositForBurn_revertsIfTransferAmountExceedsMaxBurnAmountPerMessage"
      | "testDepositForBurn_revertsIfTransferAmountIsZero"
      | "testDepositForBurn_revertsOnFailedTokenTransfer"
      | "testDepositForBurn_revertsTransferringInsufficientFunds"
      | "testDepositForBurn_succeeds"
      | "testHandleReceiveMessage_failsIfRecipientIsNotRemoteTokenMessenger"
      | "testHandleReceiveMessage_failsIfSenderIsNotLocalMessageTransmitter"
      | "testHandleReceiveMessage_revertsIfNoLocalMinterIsSet"
      | "testHandleReceiveMessage_revertsOnInvalidMessage"
      | "testHandleReceiveMessage_revertsOnInvalidMessageBodyVersion"
      | "testHandleReceiveMessage_succeedsForMint"
      | "testRemoveLocalMinter_revertsIfNoLocalMinterSet"
      | "testRemoveLocalMinter_revertsOnNonOwner"
      | "testRemoveLocalMinter_succeeds"
      | "testRemoveRemoteTokenMessenger_revertsOnNoTokenMessengerSet"
      | "testRemoveRemoteTokenMessenger_revertsOnNonOwner"
      | "testRemoveRemoteTokenMessenger_succeeds"
      | "testReplaceDepositForBurn_revertsForWrongSender"
      | "testReplaceDepositForBurn_revertsForZeroMintRecipientAddr"
      | "testReplaceDepositForBurn_revertsInvalidAttestation"
      | "testReplaceDepositForBurn_revertsWhenBurnMessageInvalid"
      | "testReplaceDepositForBurn_revertsWhenMessageInvalid"
      | "testReplaceDepositForBurn_succeeds"
      | "testRescuable"
      | "testTransferOwnershipAndAcceptOwnership"
      | "testTransferOwnershipWithoutAcceptingThenTransferToNewOwner"
      | "transferOwnershipAndAcceptOwnership"
      | "transferOwnershipWithoutAcceptingThenTransferToNewOwner"
      | "vm"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DepositForBurn"
      | "LocalMinterAdded"
      | "LocalMinterRemoved"
      | "LocalTokenMessengerAdded"
      | "LocalTokenMessengerRemoved"
      | "MessageSent"
      | "MintAndWithdraw"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "Pause"
      | "PauserChanged"
      | "RemoteTokenMessengerAdded"
      | "RemoteTokenMessengerRemoved"
      | "Unpause"
      | "log"
      | "log_address"
      | "log_array(uint256[])"
      | "log_array(int256[])"
      | "log_array(address[])"
      | "log_bytes"
      | "log_bytes32"
      | "log_int"
      | "log_named_address"
      | "log_named_array(string,uint256[])"
      | "log_named_array(string,int256[])"
      | "log_named_array(string,address[])"
      | "log_named_bytes"
      | "log_named_bytes32"
      | "log_named_decimal_int"
      | "log_named_decimal_uint"
      | "log_named_int"
      | "log_named_string"
      | "log_named_uint"
      | "log_string"
      | "log_uint"
      | "logs"
  ): EventFragment;

  encodeFunctionData(functionFragment: "IS_SCRIPT", values?: undefined): string;
  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLocalTokenMessenger",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assertContractIsPausable",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assertContractIsRescuable",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expectRevertWithWrongOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expectRevertWithWrongTokenController",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "linkTokenPair",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLocalTokenMessenger",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "testAddLocalMinter_revertsIfAlreadySet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testAddLocalMinter_revertsIfZeroAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testAddLocalMinter_revertsOnNonOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testAddLocalMinter_succeeds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testAddRemoteTokenMessenger_revertsOnExistingRemoteTokenMessenger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testAddRemoteTokenMessenger_revertsOnNonOwner",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testAddRemoteTokenMessenger_revertsOnZeroAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testAddRemoteTokenMessenger_succeeds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testConstructor_rejectsZeroAddressLocalMessageTransmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testDepositForBurnWithCaller_rejectsZeroDestinationCaller",
    values: [BigNumberish, BigNumberish, BytesLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testDepositForBurnWithCaller_returnsNonzeroNonce",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testDepositForBurnWithCaller_revertsIfTransferAmountExceedsMaxBurnAmountPerMessage",
    values: [BigNumberish, AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testDepositForBurnWithCaller_revertsIfTransferAmountIsZero",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testDepositForBurnWithCaller_succeeds",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testDepositForBurn_returnsNonzeroNonce",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testDepositForBurn_revertsIfLocalMinterIsNotSet",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testDepositForBurn_revertsIfMintRecipientIsZero",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testDepositForBurn_revertsIfNoRemoteTokenMessengerExistsForDomain",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testDepositForBurn_revertsIfTransferAmountExceedsAllowance",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testDepositForBurn_revertsIfTransferAmountExceedsMaxBurnAmountPerMessage",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testDepositForBurn_revertsIfTransferAmountIsZero",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testDepositForBurn_revertsOnFailedTokenTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testDepositForBurn_revertsTransferringInsufficientFunds",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testDepositForBurn_succeeds",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testHandleReceiveMessage_failsIfRecipientIsNotRemoteTokenMessenger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testHandleReceiveMessage_failsIfSenderIsNotLocalMessageTransmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testHandleReceiveMessage_revertsIfNoLocalMinterIsSet",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testHandleReceiveMessage_revertsOnInvalidMessage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testHandleReceiveMessage_revertsOnInvalidMessageBodyVersion",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testHandleReceiveMessage_succeedsForMint",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testRemoveLocalMinter_revertsIfNoLocalMinterSet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRemoveLocalMinter_revertsOnNonOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRemoveLocalMinter_succeeds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRemoveRemoteTokenMessenger_revertsOnNoTokenMessengerSet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRemoveRemoteTokenMessenger_revertsOnNonOwner",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testRemoveRemoteTokenMessenger_succeeds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testReplaceDepositForBurn_revertsForWrongSender",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testReplaceDepositForBurn_revertsForZeroMintRecipientAddr",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testReplaceDepositForBurn_revertsInvalidAttestation",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testReplaceDepositForBurn_revertsWhenBurnMessageInvalid",
    values: [AddressLike, BigNumberish, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testReplaceDepositForBurn_revertsWhenMessageInvalid",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testReplaceDepositForBurn_succeeds",
    values: [BigNumberish, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testRescuable",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testTransferOwnershipAndAcceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testTransferOwnershipWithoutAcceptingThenTransferToNewOwner",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnershipAndAcceptOwnership",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnershipWithoutAcceptingThenTransferToNewOwner",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "vm", values?: undefined): string;

  decodeFunctionResult(functionFragment: "IS_SCRIPT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLocalTokenMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertContractIsPausable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertContractIsRescuable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expectRevertWithWrongOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expectRevertWithWrongTokenController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "linkTokenPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLocalTokenMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testAddLocalMinter_revertsIfAlreadySet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAddLocalMinter_revertsIfZeroAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAddLocalMinter_revertsOnNonOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAddLocalMinter_succeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAddRemoteTokenMessenger_revertsOnExistingRemoteTokenMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAddRemoteTokenMessenger_revertsOnNonOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAddRemoteTokenMessenger_revertsOnZeroAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAddRemoteTokenMessenger_succeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testConstructor_rejectsZeroAddressLocalMessageTransmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDepositForBurnWithCaller_rejectsZeroDestinationCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDepositForBurnWithCaller_returnsNonzeroNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDepositForBurnWithCaller_revertsIfTransferAmountExceedsMaxBurnAmountPerMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDepositForBurnWithCaller_revertsIfTransferAmountIsZero",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDepositForBurnWithCaller_succeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDepositForBurn_returnsNonzeroNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDepositForBurn_revertsIfLocalMinterIsNotSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDepositForBurn_revertsIfMintRecipientIsZero",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDepositForBurn_revertsIfNoRemoteTokenMessengerExistsForDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDepositForBurn_revertsIfTransferAmountExceedsAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDepositForBurn_revertsIfTransferAmountExceedsMaxBurnAmountPerMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDepositForBurn_revertsIfTransferAmountIsZero",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDepositForBurn_revertsOnFailedTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDepositForBurn_revertsTransferringInsufficientFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDepositForBurn_succeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testHandleReceiveMessage_failsIfRecipientIsNotRemoteTokenMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testHandleReceiveMessage_failsIfSenderIsNotLocalMessageTransmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testHandleReceiveMessage_revertsIfNoLocalMinterIsSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testHandleReceiveMessage_revertsOnInvalidMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testHandleReceiveMessage_revertsOnInvalidMessageBodyVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testHandleReceiveMessage_succeedsForMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRemoveLocalMinter_revertsIfNoLocalMinterSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRemoveLocalMinter_revertsOnNonOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRemoveLocalMinter_succeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRemoveRemoteTokenMessenger_revertsOnNoTokenMessengerSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRemoveRemoteTokenMessenger_revertsOnNonOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRemoveRemoteTokenMessenger_succeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReplaceDepositForBurn_revertsForWrongSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReplaceDepositForBurn_revertsForZeroMintRecipientAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReplaceDepositForBurn_revertsInvalidAttestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReplaceDepositForBurn_revertsWhenBurnMessageInvalid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReplaceDepositForBurn_revertsWhenMessageInvalid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReplaceDepositForBurn_succeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRescuable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testTransferOwnershipAndAcceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testTransferOwnershipWithoutAcceptingThenTransferToNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnershipAndAcceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnershipWithoutAcceptingThenTransferToNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vm", data: BytesLike): Result;
}

export namespace DepositForBurnEvent {
  export type InputTuple = [
    nonce: BigNumberish,
    burnToken: AddressLike,
    amount: BigNumberish,
    depositor: AddressLike,
    mintRecipient: BytesLike,
    destinationDomain: BigNumberish,
    destinationTokenMessenger: BytesLike,
    destinationCaller: BytesLike
  ];
  export type OutputTuple = [
    nonce: bigint,
    burnToken: string,
    amount: bigint,
    depositor: string,
    mintRecipient: string,
    destinationDomain: bigint,
    destinationTokenMessenger: string,
    destinationCaller: string
  ];
  export interface OutputObject {
    nonce: bigint;
    burnToken: string;
    amount: bigint;
    depositor: string;
    mintRecipient: string;
    destinationDomain: bigint;
    destinationTokenMessenger: string;
    destinationCaller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LocalMinterAddedEvent {
  export type InputTuple = [localMinter: AddressLike];
  export type OutputTuple = [localMinter: string];
  export interface OutputObject {
    localMinter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LocalMinterRemovedEvent {
  export type InputTuple = [localMinter: AddressLike];
  export type OutputTuple = [localMinter: string];
  export interface OutputObject {
    localMinter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LocalTokenMessengerAddedEvent {
  export type InputTuple = [localTokenMessenger: AddressLike];
  export type OutputTuple = [localTokenMessenger: string];
  export interface OutputObject {
    localTokenMessenger: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LocalTokenMessengerRemovedEvent {
  export type InputTuple = [localTokenMessenger: AddressLike];
  export type OutputTuple = [localTokenMessenger: string];
  export interface OutputObject {
    localTokenMessenger: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageSentEvent {
  export type InputTuple = [message: BytesLike];
  export type OutputTuple = [message: string];
  export interface OutputObject {
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintAndWithdrawEvent {
  export type InputTuple = [
    mintRecipient: AddressLike,
    amount: BigNumberish,
    mintToken: AddressLike
  ];
  export type OutputTuple = [
    mintRecipient: string,
    amount: bigint,
    mintToken: string
  ];
  export interface OutputObject {
    mintRecipient: string;
    amount: bigint;
    mintToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauseEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauserChangedEvent {
  export type InputTuple = [newAddress: AddressLike];
  export type OutputTuple = [newAddress: string];
  export interface OutputObject {
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoteTokenMessengerAddedEvent {
  export type InputTuple = [domain: BigNumberish, tokenMessenger: BytesLike];
  export type OutputTuple = [domain: bigint, tokenMessenger: string];
  export interface OutputObject {
    domain: bigint;
    tokenMessenger: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoteTokenMessengerRemovedEvent {
  export type InputTuple = [domain: BigNumberish, tokenMessenger: BytesLike];
  export type OutputTuple = [domain: bigint, tokenMessenger: string];
  export interface OutputObject {
    domain: bigint;
    tokenMessenger: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpauseEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace logEvent {
  export type InputTuple = [arg0: string];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_addressEvent {
  export type InputTuple = [arg0: AddressLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_array_uint256_array_Event {
  export type InputTuple = [val: BigNumberish[]];
  export type OutputTuple = [val: bigint[]];
  export interface OutputObject {
    val: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_array_int256_array_Event {
  export type InputTuple = [val: BigNumberish[]];
  export type OutputTuple = [val: bigint[]];
  export interface OutputObject {
    val: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_array_address_array_Event {
  export type InputTuple = [val: AddressLike[]];
  export type OutputTuple = [val: string[]];
  export interface OutputObject {
    val: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_bytesEvent {
  export type InputTuple = [arg0: BytesLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_bytes32Event {
  export type InputTuple = [arg0: BytesLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_intEvent {
  export type InputTuple = [arg0: BigNumberish];
  export type OutputTuple = [arg0: bigint];
  export interface OutputObject {
    arg0: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_addressEvent {
  export type InputTuple = [key: string, val: AddressLike];
  export type OutputTuple = [key: string, val: string];
  export interface OutputObject {
    key: string;
    val: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_array_string_uint256_array_Event {
  export type InputTuple = [key: string, val: BigNumberish[]];
  export type OutputTuple = [key: string, val: bigint[]];
  export interface OutputObject {
    key: string;
    val: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_array_string_int256_array_Event {
  export type InputTuple = [key: string, val: BigNumberish[]];
  export type OutputTuple = [key: string, val: bigint[]];
  export interface OutputObject {
    key: string;
    val: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_array_string_address_array_Event {
  export type InputTuple = [key: string, val: AddressLike[]];
  export type OutputTuple = [key: string, val: string[]];
  export interface OutputObject {
    key: string;
    val: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_bytesEvent {
  export type InputTuple = [key: string, val: BytesLike];
  export type OutputTuple = [key: string, val: string];
  export interface OutputObject {
    key: string;
    val: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_bytes32Event {
  export type InputTuple = [key: string, val: BytesLike];
  export type OutputTuple = [key: string, val: string];
  export interface OutputObject {
    key: string;
    val: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_decimal_intEvent {
  export type InputTuple = [
    key: string,
    val: BigNumberish,
    decimals: BigNumberish
  ];
  export type OutputTuple = [key: string, val: bigint, decimals: bigint];
  export interface OutputObject {
    key: string;
    val: bigint;
    decimals: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_decimal_uintEvent {
  export type InputTuple = [
    key: string,
    val: BigNumberish,
    decimals: BigNumberish
  ];
  export type OutputTuple = [key: string, val: bigint, decimals: bigint];
  export interface OutputObject {
    key: string;
    val: bigint;
    decimals: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_intEvent {
  export type InputTuple = [key: string, val: BigNumberish];
  export type OutputTuple = [key: string, val: bigint];
  export interface OutputObject {
    key: string;
    val: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_stringEvent {
  export type InputTuple = [key: string, val: string];
  export type OutputTuple = [key: string, val: string];
  export interface OutputObject {
    key: string;
    val: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_uintEvent {
  export type InputTuple = [key: string, val: BigNumberish];
  export type OutputTuple = [key: string, val: bigint];
  export interface OutputObject {
    key: string;
    val: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_stringEvent {
  export type InputTuple = [arg0: string];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_uintEvent {
  export type InputTuple = [arg0: BigNumberish];
  export type OutputTuple = [arg0: bigint];
  export interface OutputObject {
    arg0: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace logsEvent {
  export type InputTuple = [arg0: BytesLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenMessengerTest extends BaseContract {
  connect(runner?: ContractRunner | null): TokenMessengerTest;
  waitForDeployment(): Promise<this>;

  interface: TokenMessengerTestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  IS_SCRIPT: TypedContractMethod<[], [boolean], "view">;

  IS_TEST: TypedContractMethod<[], [boolean], "view">;

  addLocalTokenMessenger: TypedContractMethod<
    [_tokenMinter: AddressLike, _localTokenMessenger: AddressLike],
    [void],
    "nonpayable"
  >;

  assertContractIsPausable: TypedContractMethod<
    [
      _pausableContractAddress: AddressLike,
      _currentPauser: AddressLike,
      _newPauser: AddressLike,
      _owner: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  assertContractIsRescuable: TypedContractMethod<
    [
      _rescuableContractAddress: AddressLike,
      _rescuer: AddressLike,
      _rescueRecipient: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  expectRevertWithWrongOwner: TypedContractMethod<[], [void], "nonpayable">;

  expectRevertWithWrongTokenController: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  failed: TypedContractMethod<[], [boolean], "nonpayable">;

  linkTokenPair: TypedContractMethod<
    [
      tokenMinter: AddressLike,
      _localToken: AddressLike,
      _remoteDomain: BigNumberish,
      _remoteTokenBytes32: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  removeLocalTokenMessenger: TypedContractMethod<
    [_tokenMinter: AddressLike],
    [void],
    "nonpayable"
  >;

  setUp: TypedContractMethod<[], [void], "nonpayable">;

  testAddLocalMinter_revertsIfAlreadySet: TypedContractMethod<
    [_localMinter: AddressLike],
    [void],
    "nonpayable"
  >;

  testAddLocalMinter_revertsIfZeroAddress: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testAddLocalMinter_revertsOnNonOwner: TypedContractMethod<
    [_localMinter: AddressLike],
    [void],
    "nonpayable"
  >;

  testAddLocalMinter_succeeds: TypedContractMethod<
    [_localMinter: AddressLike],
    [void],
    "nonpayable"
  >;

  testAddRemoteTokenMessenger_revertsOnExistingRemoteTokenMessenger: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testAddRemoteTokenMessenger_revertsOnNonOwner: TypedContractMethod<
    [_domain: BigNumberish, _tokenMessenger: BytesLike],
    [void],
    "nonpayable"
  >;

  testAddRemoteTokenMessenger_revertsOnZeroAddress: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testAddRemoteTokenMessenger_succeeds: TypedContractMethod<
    [_domain: BigNumberish],
    [void],
    "nonpayable"
  >;

  testConstructor_rejectsZeroAddressLocalMessageTransmitter: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testDepositForBurnWithCaller_rejectsZeroDestinationCaller: TypedContractMethod<
    [
      _amount: BigNumberish,
      _domain: BigNumberish,
      _mintRecipient: BytesLike,
      _tokenAddress: AddressLike,
      _mintRecipientAddr: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  testDepositForBurnWithCaller_returnsNonzeroNonce: TypedContractMethod<
    [_mintRecipientAddr: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  testDepositForBurnWithCaller_revertsIfTransferAmountExceedsMaxBurnAmountPerMessage: TypedContractMethod<
    [
      _amount: BigNumberish,
      _mintRecipientAddr: AddressLike,
      _destinationCaller: BytesLike,
      _allowedBurnAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  testDepositForBurnWithCaller_revertsIfTransferAmountIsZero: TypedContractMethod<
    [_mintRecipient: BytesLike, _destinationCaller: BytesLike],
    [void],
    "nonpayable"
  >;

  testDepositForBurnWithCaller_succeeds: TypedContractMethod<
    [_amount: BigNumberish, _mintRecipientAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  testDepositForBurn_returnsNonzeroNonce: TypedContractMethod<
    [_mintRecipientAddr: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  testDepositForBurn_revertsIfLocalMinterIsNotSet: TypedContractMethod<
    [_amount: BigNumberish, _mintRecipient: BytesLike],
    [void],
    "nonpayable"
  >;

  testDepositForBurn_revertsIfMintRecipientIsZero: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  testDepositForBurn_revertsIfNoRemoteTokenMessengerExistsForDomain: TypedContractMethod<
    [_relayerAddress: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  testDepositForBurn_revertsIfTransferAmountExceedsAllowance: TypedContractMethod<
    [_amount: BigNumberish, _mintRecipient: BytesLike],
    [void],
    "nonpayable"
  >;

  testDepositForBurn_revertsIfTransferAmountExceedsMaxBurnAmountPerMessage: TypedContractMethod<
    [
      _amount: BigNumberish,
      _mintRecipientAddr: AddressLike,
      _destinationCaller: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  testDepositForBurn_revertsIfTransferAmountIsZero: TypedContractMethod<
    [_mintRecipient: BytesLike],
    [void],
    "nonpayable"
  >;

  testDepositForBurn_revertsOnFailedTokenTransfer: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  testDepositForBurn_revertsTransferringInsufficientFunds: TypedContractMethod<
    [_amount: BigNumberish, _mintRecipient: BytesLike],
    [void],
    "nonpayable"
  >;

  testDepositForBurn_succeeds: TypedContractMethod<
    [_amount: BigNumberish, _mintRecipientAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  testHandleReceiveMessage_failsIfRecipientIsNotRemoteTokenMessenger: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testHandleReceiveMessage_failsIfSenderIsNotLocalMessageTransmitter: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testHandleReceiveMessage_revertsIfNoLocalMinterIsSet: TypedContractMethod<
    [_mintRecipient: BytesLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  testHandleReceiveMessage_revertsOnInvalidMessage: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  testHandleReceiveMessage_revertsOnInvalidMessageBodyVersion: TypedContractMethod<
    [_amount: BigNumberish, _mintRecipient: BytesLike],
    [void],
    "nonpayable"
  >;

  testHandleReceiveMessage_succeedsForMint: TypedContractMethod<
    [_amount: BigNumberish, _mintRecipientAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  testRemoveLocalMinter_revertsIfNoLocalMinterSet: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testRemoveLocalMinter_revertsOnNonOwner: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testRemoveLocalMinter_succeeds: TypedContractMethod<[], [void], "nonpayable">;

  testRemoveRemoteTokenMessenger_revertsOnNoTokenMessengerSet: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testRemoveRemoteTokenMessenger_revertsOnNonOwner: TypedContractMethod<
    [_domain: BigNumberish, _tokenMessenger: BytesLike],
    [void],
    "nonpayable"
  >;

  testRemoveRemoteTokenMessenger_succeeds: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testReplaceDepositForBurn_revertsForWrongSender: TypedContractMethod<
    [
      _mintRecipientAddr: AddressLike,
      _amount: BigNumberish,
      _newDestinationCallerAddr: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  testReplaceDepositForBurn_revertsForZeroMintRecipientAddr: TypedContractMethod<
    [
      _mintRecipientAddr: AddressLike,
      _amount: BigNumberish,
      _newDestinationCallerAddr: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  testReplaceDepositForBurn_revertsInvalidAttestation: TypedContractMethod<
    [
      _mintRecipientAddr: AddressLike,
      _amount: BigNumberish,
      _newDestinationCallerAddr: AddressLike,
      _newMintRecipientAddr: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  testReplaceDepositForBurn_revertsWhenBurnMessageInvalid: TypedContractMethod<
    [
      _mintRecipientAddr: AddressLike,
      _amount: BigNumberish,
      _newDestinationCaller: BytesLike,
      _newMintRecipient: BytesLike,
      _nonce: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  testReplaceDepositForBurn_revertsWhenMessageInvalid: TypedContractMethod<
    [
      _mintRecipientAddr: AddressLike,
      _amount: BigNumberish,
      _newDestinationCallerAddr: AddressLike,
      _newMintRecipientAddr: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  testReplaceDepositForBurn_succeeds: TypedContractMethod<
    [
      _nonce: BigNumberish,
      _mintRecipient: BytesLike,
      _newDestinationCallerAddr: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  testRescuable: TypedContractMethod<
    [
      _rescuer: AddressLike,
      _rescueRecipient: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  testTransferOwnershipAndAcceptOwnership: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testTransferOwnershipWithoutAcceptingThenTransferToNewOwner: TypedContractMethod<
    [_newOwner: AddressLike, _secondNewOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnershipAndAcceptOwnership: TypedContractMethod<
    [_ownableContractAddress: AddressLike, _newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnershipWithoutAcceptingThenTransferToNewOwner: TypedContractMethod<
    [
      _ownableContractAddress: AddressLike,
      _newOwner: AddressLike,
      _secondNewOwner: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  vm: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "IS_SCRIPT"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "IS_TEST"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "addLocalTokenMessenger"
  ): TypedContractMethod<
    [_tokenMinter: AddressLike, _localTokenMessenger: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "assertContractIsPausable"
  ): TypedContractMethod<
    [
      _pausableContractAddress: AddressLike,
      _currentPauser: AddressLike,
      _newPauser: AddressLike,
      _owner: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "assertContractIsRescuable"
  ): TypedContractMethod<
    [
      _rescuableContractAddress: AddressLike,
      _rescuer: AddressLike,
      _rescueRecipient: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "expectRevertWithWrongOwner"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "expectRevertWithWrongTokenController"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "failed"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "linkTokenPair"
  ): TypedContractMethod<
    [
      tokenMinter: AddressLike,
      _localToken: AddressLike,
      _remoteDomain: BigNumberish,
      _remoteTokenBytes32: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLocalTokenMessenger"
  ): TypedContractMethod<[_tokenMinter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUp"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testAddLocalMinter_revertsIfAlreadySet"
  ): TypedContractMethod<[_localMinter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testAddLocalMinter_revertsIfZeroAddress"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testAddLocalMinter_revertsOnNonOwner"
  ): TypedContractMethod<[_localMinter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testAddLocalMinter_succeeds"
  ): TypedContractMethod<[_localMinter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testAddRemoteTokenMessenger_revertsOnExistingRemoteTokenMessenger"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testAddRemoteTokenMessenger_revertsOnNonOwner"
  ): TypedContractMethod<
    [_domain: BigNumberish, _tokenMessenger: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testAddRemoteTokenMessenger_revertsOnZeroAddress"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testAddRemoteTokenMessenger_succeeds"
  ): TypedContractMethod<[_domain: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testConstructor_rejectsZeroAddressLocalMessageTransmitter"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testDepositForBurnWithCaller_rejectsZeroDestinationCaller"
  ): TypedContractMethod<
    [
      _amount: BigNumberish,
      _domain: BigNumberish,
      _mintRecipient: BytesLike,
      _tokenAddress: AddressLike,
      _mintRecipientAddr: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testDepositForBurnWithCaller_returnsNonzeroNonce"
  ): TypedContractMethod<
    [_mintRecipientAddr: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testDepositForBurnWithCaller_revertsIfTransferAmountExceedsMaxBurnAmountPerMessage"
  ): TypedContractMethod<
    [
      _amount: BigNumberish,
      _mintRecipientAddr: AddressLike,
      _destinationCaller: BytesLike,
      _allowedBurnAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testDepositForBurnWithCaller_revertsIfTransferAmountIsZero"
  ): TypedContractMethod<
    [_mintRecipient: BytesLike, _destinationCaller: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testDepositForBurnWithCaller_succeeds"
  ): TypedContractMethod<
    [_amount: BigNumberish, _mintRecipientAddr: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testDepositForBurn_returnsNonzeroNonce"
  ): TypedContractMethod<
    [_mintRecipientAddr: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testDepositForBurn_revertsIfLocalMinterIsNotSet"
  ): TypedContractMethod<
    [_amount: BigNumberish, _mintRecipient: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testDepositForBurn_revertsIfMintRecipientIsZero"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testDepositForBurn_revertsIfNoRemoteTokenMessengerExistsForDomain"
  ): TypedContractMethod<
    [_relayerAddress: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testDepositForBurn_revertsIfTransferAmountExceedsAllowance"
  ): TypedContractMethod<
    [_amount: BigNumberish, _mintRecipient: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testDepositForBurn_revertsIfTransferAmountExceedsMaxBurnAmountPerMessage"
  ): TypedContractMethod<
    [
      _amount: BigNumberish,
      _mintRecipientAddr: AddressLike,
      _destinationCaller: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testDepositForBurn_revertsIfTransferAmountIsZero"
  ): TypedContractMethod<[_mintRecipient: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testDepositForBurn_revertsOnFailedTokenTransfer"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testDepositForBurn_revertsTransferringInsufficientFunds"
  ): TypedContractMethod<
    [_amount: BigNumberish, _mintRecipient: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testDepositForBurn_succeeds"
  ): TypedContractMethod<
    [_amount: BigNumberish, _mintRecipientAddr: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testHandleReceiveMessage_failsIfRecipientIsNotRemoteTokenMessenger"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testHandleReceiveMessage_failsIfSenderIsNotLocalMessageTransmitter"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testHandleReceiveMessage_revertsIfNoLocalMinterIsSet"
  ): TypedContractMethod<
    [_mintRecipient: BytesLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testHandleReceiveMessage_revertsOnInvalidMessage"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testHandleReceiveMessage_revertsOnInvalidMessageBodyVersion"
  ): TypedContractMethod<
    [_amount: BigNumberish, _mintRecipient: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testHandleReceiveMessage_succeedsForMint"
  ): TypedContractMethod<
    [_amount: BigNumberish, _mintRecipientAddr: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testRemoveLocalMinter_revertsIfNoLocalMinterSet"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testRemoveLocalMinter_revertsOnNonOwner"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testRemoveLocalMinter_succeeds"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testRemoveRemoteTokenMessenger_revertsOnNoTokenMessengerSet"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testRemoveRemoteTokenMessenger_revertsOnNonOwner"
  ): TypedContractMethod<
    [_domain: BigNumberish, _tokenMessenger: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testRemoveRemoteTokenMessenger_succeeds"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testReplaceDepositForBurn_revertsForWrongSender"
  ): TypedContractMethod<
    [
      _mintRecipientAddr: AddressLike,
      _amount: BigNumberish,
      _newDestinationCallerAddr: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testReplaceDepositForBurn_revertsForZeroMintRecipientAddr"
  ): TypedContractMethod<
    [
      _mintRecipientAddr: AddressLike,
      _amount: BigNumberish,
      _newDestinationCallerAddr: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testReplaceDepositForBurn_revertsInvalidAttestation"
  ): TypedContractMethod<
    [
      _mintRecipientAddr: AddressLike,
      _amount: BigNumberish,
      _newDestinationCallerAddr: AddressLike,
      _newMintRecipientAddr: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testReplaceDepositForBurn_revertsWhenBurnMessageInvalid"
  ): TypedContractMethod<
    [
      _mintRecipientAddr: AddressLike,
      _amount: BigNumberish,
      _newDestinationCaller: BytesLike,
      _newMintRecipient: BytesLike,
      _nonce: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testReplaceDepositForBurn_revertsWhenMessageInvalid"
  ): TypedContractMethod<
    [
      _mintRecipientAddr: AddressLike,
      _amount: BigNumberish,
      _newDestinationCallerAddr: AddressLike,
      _newMintRecipientAddr: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testReplaceDepositForBurn_succeeds"
  ): TypedContractMethod<
    [
      _nonce: BigNumberish,
      _mintRecipient: BytesLike,
      _newDestinationCallerAddr: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testRescuable"
  ): TypedContractMethod<
    [
      _rescuer: AddressLike,
      _rescueRecipient: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testTransferOwnershipAndAcceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testTransferOwnershipWithoutAcceptingThenTransferToNewOwner"
  ): TypedContractMethod<
    [_newOwner: AddressLike, _secondNewOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnershipAndAcceptOwnership"
  ): TypedContractMethod<
    [_ownableContractAddress: AddressLike, _newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnershipWithoutAcceptingThenTransferToNewOwner"
  ): TypedContractMethod<
    [
      _ownableContractAddress: AddressLike,
      _newOwner: AddressLike,
      _secondNewOwner: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(nameOrSignature: "vm"): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "DepositForBurn"
  ): TypedContractEvent<
    DepositForBurnEvent.InputTuple,
    DepositForBurnEvent.OutputTuple,
    DepositForBurnEvent.OutputObject
  >;
  getEvent(
    key: "LocalMinterAdded"
  ): TypedContractEvent<
    LocalMinterAddedEvent.InputTuple,
    LocalMinterAddedEvent.OutputTuple,
    LocalMinterAddedEvent.OutputObject
  >;
  getEvent(
    key: "LocalMinterRemoved"
  ): TypedContractEvent<
    LocalMinterRemovedEvent.InputTuple,
    LocalMinterRemovedEvent.OutputTuple,
    LocalMinterRemovedEvent.OutputObject
  >;
  getEvent(
    key: "LocalTokenMessengerAdded"
  ): TypedContractEvent<
    LocalTokenMessengerAddedEvent.InputTuple,
    LocalTokenMessengerAddedEvent.OutputTuple,
    LocalTokenMessengerAddedEvent.OutputObject
  >;
  getEvent(
    key: "LocalTokenMessengerRemoved"
  ): TypedContractEvent<
    LocalTokenMessengerRemovedEvent.InputTuple,
    LocalTokenMessengerRemovedEvent.OutputTuple,
    LocalTokenMessengerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "MessageSent"
  ): TypedContractEvent<
    MessageSentEvent.InputTuple,
    MessageSentEvent.OutputTuple,
    MessageSentEvent.OutputObject
  >;
  getEvent(
    key: "MintAndWithdraw"
  ): TypedContractEvent<
    MintAndWithdrawEvent.InputTuple,
    MintAndWithdrawEvent.OutputTuple,
    MintAndWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Pause"
  ): TypedContractEvent<
    PauseEvent.InputTuple,
    PauseEvent.OutputTuple,
    PauseEvent.OutputObject
  >;
  getEvent(
    key: "PauserChanged"
  ): TypedContractEvent<
    PauserChangedEvent.InputTuple,
    PauserChangedEvent.OutputTuple,
    PauserChangedEvent.OutputObject
  >;
  getEvent(
    key: "RemoteTokenMessengerAdded"
  ): TypedContractEvent<
    RemoteTokenMessengerAddedEvent.InputTuple,
    RemoteTokenMessengerAddedEvent.OutputTuple,
    RemoteTokenMessengerAddedEvent.OutputObject
  >;
  getEvent(
    key: "RemoteTokenMessengerRemoved"
  ): TypedContractEvent<
    RemoteTokenMessengerRemovedEvent.InputTuple,
    RemoteTokenMessengerRemovedEvent.OutputTuple,
    RemoteTokenMessengerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Unpause"
  ): TypedContractEvent<
    UnpauseEvent.InputTuple,
    UnpauseEvent.OutputTuple,
    UnpauseEvent.OutputObject
  >;
  getEvent(
    key: "log"
  ): TypedContractEvent<
    logEvent.InputTuple,
    logEvent.OutputTuple,
    logEvent.OutputObject
  >;
  getEvent(
    key: "log_address"
  ): TypedContractEvent<
    log_addressEvent.InputTuple,
    log_addressEvent.OutputTuple,
    log_addressEvent.OutputObject
  >;
  getEvent(
    key: "log_array(uint256[])"
  ): TypedContractEvent<
    log_array_uint256_array_Event.InputTuple,
    log_array_uint256_array_Event.OutputTuple,
    log_array_uint256_array_Event.OutputObject
  >;
  getEvent(
    key: "log_array(int256[])"
  ): TypedContractEvent<
    log_array_int256_array_Event.InputTuple,
    log_array_int256_array_Event.OutputTuple,
    log_array_int256_array_Event.OutputObject
  >;
  getEvent(
    key: "log_array(address[])"
  ): TypedContractEvent<
    log_array_address_array_Event.InputTuple,
    log_array_address_array_Event.OutputTuple,
    log_array_address_array_Event.OutputObject
  >;
  getEvent(
    key: "log_bytes"
  ): TypedContractEvent<
    log_bytesEvent.InputTuple,
    log_bytesEvent.OutputTuple,
    log_bytesEvent.OutputObject
  >;
  getEvent(
    key: "log_bytes32"
  ): TypedContractEvent<
    log_bytes32Event.InputTuple,
    log_bytes32Event.OutputTuple,
    log_bytes32Event.OutputObject
  >;
  getEvent(
    key: "log_int"
  ): TypedContractEvent<
    log_intEvent.InputTuple,
    log_intEvent.OutputTuple,
    log_intEvent.OutputObject
  >;
  getEvent(
    key: "log_named_address"
  ): TypedContractEvent<
    log_named_addressEvent.InputTuple,
    log_named_addressEvent.OutputTuple,
    log_named_addressEvent.OutputObject
  >;
  getEvent(
    key: "log_named_array(string,uint256[])"
  ): TypedContractEvent<
    log_named_array_string_uint256_array_Event.InputTuple,
    log_named_array_string_uint256_array_Event.OutputTuple,
    log_named_array_string_uint256_array_Event.OutputObject
  >;
  getEvent(
    key: "log_named_array(string,int256[])"
  ): TypedContractEvent<
    log_named_array_string_int256_array_Event.InputTuple,
    log_named_array_string_int256_array_Event.OutputTuple,
    log_named_array_string_int256_array_Event.OutputObject
  >;
  getEvent(
    key: "log_named_array(string,address[])"
  ): TypedContractEvent<
    log_named_array_string_address_array_Event.InputTuple,
    log_named_array_string_address_array_Event.OutputTuple,
    log_named_array_string_address_array_Event.OutputObject
  >;
  getEvent(
    key: "log_named_bytes"
  ): TypedContractEvent<
    log_named_bytesEvent.InputTuple,
    log_named_bytesEvent.OutputTuple,
    log_named_bytesEvent.OutputObject
  >;
  getEvent(
    key: "log_named_bytes32"
  ): TypedContractEvent<
    log_named_bytes32Event.InputTuple,
    log_named_bytes32Event.OutputTuple,
    log_named_bytes32Event.OutputObject
  >;
  getEvent(
    key: "log_named_decimal_int"
  ): TypedContractEvent<
    log_named_decimal_intEvent.InputTuple,
    log_named_decimal_intEvent.OutputTuple,
    log_named_decimal_intEvent.OutputObject
  >;
  getEvent(
    key: "log_named_decimal_uint"
  ): TypedContractEvent<
    log_named_decimal_uintEvent.InputTuple,
    log_named_decimal_uintEvent.OutputTuple,
    log_named_decimal_uintEvent.OutputObject
  >;
  getEvent(
    key: "log_named_int"
  ): TypedContractEvent<
    log_named_intEvent.InputTuple,
    log_named_intEvent.OutputTuple,
    log_named_intEvent.OutputObject
  >;
  getEvent(
    key: "log_named_string"
  ): TypedContractEvent<
    log_named_stringEvent.InputTuple,
    log_named_stringEvent.OutputTuple,
    log_named_stringEvent.OutputObject
  >;
  getEvent(
    key: "log_named_uint"
  ): TypedContractEvent<
    log_named_uintEvent.InputTuple,
    log_named_uintEvent.OutputTuple,
    log_named_uintEvent.OutputObject
  >;
  getEvent(
    key: "log_string"
  ): TypedContractEvent<
    log_stringEvent.InputTuple,
    log_stringEvent.OutputTuple,
    log_stringEvent.OutputObject
  >;
  getEvent(
    key: "log_uint"
  ): TypedContractEvent<
    log_uintEvent.InputTuple,
    log_uintEvent.OutputTuple,
    log_uintEvent.OutputObject
  >;
  getEvent(
    key: "logs"
  ): TypedContractEvent<
    logsEvent.InputTuple,
    logsEvent.OutputTuple,
    logsEvent.OutputObject
  >;

  filters: {
    "DepositForBurn(uint64,address,uint256,address,bytes32,uint32,bytes32,bytes32)": TypedContractEvent<
      DepositForBurnEvent.InputTuple,
      DepositForBurnEvent.OutputTuple,
      DepositForBurnEvent.OutputObject
    >;
    DepositForBurn: TypedContractEvent<
      DepositForBurnEvent.InputTuple,
      DepositForBurnEvent.OutputTuple,
      DepositForBurnEvent.OutputObject
    >;

    "LocalMinterAdded(address)": TypedContractEvent<
      LocalMinterAddedEvent.InputTuple,
      LocalMinterAddedEvent.OutputTuple,
      LocalMinterAddedEvent.OutputObject
    >;
    LocalMinterAdded: TypedContractEvent<
      LocalMinterAddedEvent.InputTuple,
      LocalMinterAddedEvent.OutputTuple,
      LocalMinterAddedEvent.OutputObject
    >;

    "LocalMinterRemoved(address)": TypedContractEvent<
      LocalMinterRemovedEvent.InputTuple,
      LocalMinterRemovedEvent.OutputTuple,
      LocalMinterRemovedEvent.OutputObject
    >;
    LocalMinterRemoved: TypedContractEvent<
      LocalMinterRemovedEvent.InputTuple,
      LocalMinterRemovedEvent.OutputTuple,
      LocalMinterRemovedEvent.OutputObject
    >;

    "LocalTokenMessengerAdded(address)": TypedContractEvent<
      LocalTokenMessengerAddedEvent.InputTuple,
      LocalTokenMessengerAddedEvent.OutputTuple,
      LocalTokenMessengerAddedEvent.OutputObject
    >;
    LocalTokenMessengerAdded: TypedContractEvent<
      LocalTokenMessengerAddedEvent.InputTuple,
      LocalTokenMessengerAddedEvent.OutputTuple,
      LocalTokenMessengerAddedEvent.OutputObject
    >;

    "LocalTokenMessengerRemoved(address)": TypedContractEvent<
      LocalTokenMessengerRemovedEvent.InputTuple,
      LocalTokenMessengerRemovedEvent.OutputTuple,
      LocalTokenMessengerRemovedEvent.OutputObject
    >;
    LocalTokenMessengerRemoved: TypedContractEvent<
      LocalTokenMessengerRemovedEvent.InputTuple,
      LocalTokenMessengerRemovedEvent.OutputTuple,
      LocalTokenMessengerRemovedEvent.OutputObject
    >;

    "MessageSent(bytes)": TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;
    MessageSent: TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;

    "MintAndWithdraw(address,uint256,address)": TypedContractEvent<
      MintAndWithdrawEvent.InputTuple,
      MintAndWithdrawEvent.OutputTuple,
      MintAndWithdrawEvent.OutputObject
    >;
    MintAndWithdraw: TypedContractEvent<
      MintAndWithdrawEvent.InputTuple,
      MintAndWithdrawEvent.OutputTuple,
      MintAndWithdrawEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Pause()": TypedContractEvent<
      PauseEvent.InputTuple,
      PauseEvent.OutputTuple,
      PauseEvent.OutputObject
    >;
    Pause: TypedContractEvent<
      PauseEvent.InputTuple,
      PauseEvent.OutputTuple,
      PauseEvent.OutputObject
    >;

    "PauserChanged(address)": TypedContractEvent<
      PauserChangedEvent.InputTuple,
      PauserChangedEvent.OutputTuple,
      PauserChangedEvent.OutputObject
    >;
    PauserChanged: TypedContractEvent<
      PauserChangedEvent.InputTuple,
      PauserChangedEvent.OutputTuple,
      PauserChangedEvent.OutputObject
    >;

    "RemoteTokenMessengerAdded(uint32,bytes32)": TypedContractEvent<
      RemoteTokenMessengerAddedEvent.InputTuple,
      RemoteTokenMessengerAddedEvent.OutputTuple,
      RemoteTokenMessengerAddedEvent.OutputObject
    >;
    RemoteTokenMessengerAdded: TypedContractEvent<
      RemoteTokenMessengerAddedEvent.InputTuple,
      RemoteTokenMessengerAddedEvent.OutputTuple,
      RemoteTokenMessengerAddedEvent.OutputObject
    >;

    "RemoteTokenMessengerRemoved(uint32,bytes32)": TypedContractEvent<
      RemoteTokenMessengerRemovedEvent.InputTuple,
      RemoteTokenMessengerRemovedEvent.OutputTuple,
      RemoteTokenMessengerRemovedEvent.OutputObject
    >;
    RemoteTokenMessengerRemoved: TypedContractEvent<
      RemoteTokenMessengerRemovedEvent.InputTuple,
      RemoteTokenMessengerRemovedEvent.OutputTuple,
      RemoteTokenMessengerRemovedEvent.OutputObject
    >;

    "Unpause()": TypedContractEvent<
      UnpauseEvent.InputTuple,
      UnpauseEvent.OutputTuple,
      UnpauseEvent.OutputObject
    >;
    Unpause: TypedContractEvent<
      UnpauseEvent.InputTuple,
      UnpauseEvent.OutputTuple,
      UnpauseEvent.OutputObject
    >;

    "log(string)": TypedContractEvent<
      logEvent.InputTuple,
      logEvent.OutputTuple,
      logEvent.OutputObject
    >;
    log: TypedContractEvent<
      logEvent.InputTuple,
      logEvent.OutputTuple,
      logEvent.OutputObject
    >;

    "log_address(address)": TypedContractEvent<
      log_addressEvent.InputTuple,
      log_addressEvent.OutputTuple,
      log_addressEvent.OutputObject
    >;
    log_address: TypedContractEvent<
      log_addressEvent.InputTuple,
      log_addressEvent.OutputTuple,
      log_addressEvent.OutputObject
    >;

    "log_array(uint256[])": TypedContractEvent<
      log_array_uint256_array_Event.InputTuple,
      log_array_uint256_array_Event.OutputTuple,
      log_array_uint256_array_Event.OutputObject
    >;
    "log_array(int256[])": TypedContractEvent<
      log_array_int256_array_Event.InputTuple,
      log_array_int256_array_Event.OutputTuple,
      log_array_int256_array_Event.OutputObject
    >;
    "log_array(address[])": TypedContractEvent<
      log_array_address_array_Event.InputTuple,
      log_array_address_array_Event.OutputTuple,
      log_array_address_array_Event.OutputObject
    >;

    "log_bytes(bytes)": TypedContractEvent<
      log_bytesEvent.InputTuple,
      log_bytesEvent.OutputTuple,
      log_bytesEvent.OutputObject
    >;
    log_bytes: TypedContractEvent<
      log_bytesEvent.InputTuple,
      log_bytesEvent.OutputTuple,
      log_bytesEvent.OutputObject
    >;

    "log_bytes32(bytes32)": TypedContractEvent<
      log_bytes32Event.InputTuple,
      log_bytes32Event.OutputTuple,
      log_bytes32Event.OutputObject
    >;
    log_bytes32: TypedContractEvent<
      log_bytes32Event.InputTuple,
      log_bytes32Event.OutputTuple,
      log_bytes32Event.OutputObject
    >;

    "log_int(int256)": TypedContractEvent<
      log_intEvent.InputTuple,
      log_intEvent.OutputTuple,
      log_intEvent.OutputObject
    >;
    log_int: TypedContractEvent<
      log_intEvent.InputTuple,
      log_intEvent.OutputTuple,
      log_intEvent.OutputObject
    >;

    "log_named_address(string,address)": TypedContractEvent<
      log_named_addressEvent.InputTuple,
      log_named_addressEvent.OutputTuple,
      log_named_addressEvent.OutputObject
    >;
    log_named_address: TypedContractEvent<
      log_named_addressEvent.InputTuple,
      log_named_addressEvent.OutputTuple,
      log_named_addressEvent.OutputObject
    >;

    "log_named_array(string,uint256[])": TypedContractEvent<
      log_named_array_string_uint256_array_Event.InputTuple,
      log_named_array_string_uint256_array_Event.OutputTuple,
      log_named_array_string_uint256_array_Event.OutputObject
    >;
    "log_named_array(string,int256[])": TypedContractEvent<
      log_named_array_string_int256_array_Event.InputTuple,
      log_named_array_string_int256_array_Event.OutputTuple,
      log_named_array_string_int256_array_Event.OutputObject
    >;
    "log_named_array(string,address[])": TypedContractEvent<
      log_named_array_string_address_array_Event.InputTuple,
      log_named_array_string_address_array_Event.OutputTuple,
      log_named_array_string_address_array_Event.OutputObject
    >;

    "log_named_bytes(string,bytes)": TypedContractEvent<
      log_named_bytesEvent.InputTuple,
      log_named_bytesEvent.OutputTuple,
      log_named_bytesEvent.OutputObject
    >;
    log_named_bytes: TypedContractEvent<
      log_named_bytesEvent.InputTuple,
      log_named_bytesEvent.OutputTuple,
      log_named_bytesEvent.OutputObject
    >;

    "log_named_bytes32(string,bytes32)": TypedContractEvent<
      log_named_bytes32Event.InputTuple,
      log_named_bytes32Event.OutputTuple,
      log_named_bytes32Event.OutputObject
    >;
    log_named_bytes32: TypedContractEvent<
      log_named_bytes32Event.InputTuple,
      log_named_bytes32Event.OutputTuple,
      log_named_bytes32Event.OutputObject
    >;

    "log_named_decimal_int(string,int256,uint256)": TypedContractEvent<
      log_named_decimal_intEvent.InputTuple,
      log_named_decimal_intEvent.OutputTuple,
      log_named_decimal_intEvent.OutputObject
    >;
    log_named_decimal_int: TypedContractEvent<
      log_named_decimal_intEvent.InputTuple,
      log_named_decimal_intEvent.OutputTuple,
      log_named_decimal_intEvent.OutputObject
    >;

    "log_named_decimal_uint(string,uint256,uint256)": TypedContractEvent<
      log_named_decimal_uintEvent.InputTuple,
      log_named_decimal_uintEvent.OutputTuple,
      log_named_decimal_uintEvent.OutputObject
    >;
    log_named_decimal_uint: TypedContractEvent<
      log_named_decimal_uintEvent.InputTuple,
      log_named_decimal_uintEvent.OutputTuple,
      log_named_decimal_uintEvent.OutputObject
    >;

    "log_named_int(string,int256)": TypedContractEvent<
      log_named_intEvent.InputTuple,
      log_named_intEvent.OutputTuple,
      log_named_intEvent.OutputObject
    >;
    log_named_int: TypedContractEvent<
      log_named_intEvent.InputTuple,
      log_named_intEvent.OutputTuple,
      log_named_intEvent.OutputObject
    >;

    "log_named_string(string,string)": TypedContractEvent<
      log_named_stringEvent.InputTuple,
      log_named_stringEvent.OutputTuple,
      log_named_stringEvent.OutputObject
    >;
    log_named_string: TypedContractEvent<
      log_named_stringEvent.InputTuple,
      log_named_stringEvent.OutputTuple,
      log_named_stringEvent.OutputObject
    >;

    "log_named_uint(string,uint256)": TypedContractEvent<
      log_named_uintEvent.InputTuple,
      log_named_uintEvent.OutputTuple,
      log_named_uintEvent.OutputObject
    >;
    log_named_uint: TypedContractEvent<
      log_named_uintEvent.InputTuple,
      log_named_uintEvent.OutputTuple,
      log_named_uintEvent.OutputObject
    >;

    "log_string(string)": TypedContractEvent<
      log_stringEvent.InputTuple,
      log_stringEvent.OutputTuple,
      log_stringEvent.OutputObject
    >;
    log_string: TypedContractEvent<
      log_stringEvent.InputTuple,
      log_stringEvent.OutputTuple,
      log_stringEvent.OutputObject
    >;

    "log_uint(uint256)": TypedContractEvent<
      log_uintEvent.InputTuple,
      log_uintEvent.OutputTuple,
      log_uintEvent.OutputObject
    >;
    log_uint: TypedContractEvent<
      log_uintEvent.InputTuple,
      log_uintEvent.OutputTuple,
      log_uintEvent.OutputObject
    >;

    "logs(bytes)": TypedContractEvent<
      logsEvent.InputTuple,
      logsEvent.OutputTuple,
      logsEvent.OutputObject
    >;
    logs: TypedContractEvent<
      logsEvent.InputTuple,
      logsEvent.OutputTuple,
      logsEvent.OutputObject
    >;
  };
}
